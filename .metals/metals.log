2023.11.30 18:25:54 INFO  Started: Metals version 1.1.0 in folders 'C:\dev\scala\Advent_of_code' for client Visual Studio Code 1.84.2.
2023.11.30 18:25:57 WARN  Build server is not auto-connectable.
2023.11.30 18:25:57 WARN  no build target for: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:26:04 INFO  no build target found for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala. Using presentation compiler with project's scala-library version: 3.3.1
2023.11.30 18:26:09 INFO  time: code lens generation in 11s
2023.11.30 18:28:21 WARN  no build target for: C:\dev\scala\Advent_of_code\src\test\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:28:21 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/src/test/scala/AdventOfCode2022/Day01.scala
2023.11.30 18:28:30 WARN  no build target for: C:\dev\scala\Advent_of_code\src\test\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:28:49 WARN  no build target for: C:\dev\scala\Advent_of_code\src\test\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:28:57 WARN  no build target for: C:\dev\scala\Advent_of_code\src\test\scala\AdventOfCode2022\Day01Tests.scala
2023.11.30 18:28:59 WARN  no build target for: C:\dev\scala\Advent_of_code\src\test\scala\AdventOfCode2022\Day01Tests.scala
2023.11.30 18:29:07 WARN  no build target for: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:30:29 WARN  no build target for: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:30:55 WARN  no build target for: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:31:54 WARN  no build target for: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:32:05 WARN  no build target for: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:32:40 WARN  no build target for: C:\dev\scala\Advent_of_code\build.sbt
2023.11.30 18:33:01 WARN  no build target for: C:\dev\scala\Advent_of_code\build.sbt
2023.11.30 18:33:05 INFO  running 'C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\rogier\AppData\Local\Temp\metals6825897340897733219\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2023.11.30 18:33:10 INFO  [info] welcome to sbt 1.9.7 (Eclipse Adoptium Java 11.0.21)
2023.11.30 18:33:14 INFO  [info] loading settings for project advent_of_code-build-build from metals.sbt ...
2023.11.30 18:33:15 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project\project
2023.11.30 18:33:20 INFO  [info] loading settings for project advent_of_code-build from metals.sbt ...
2023.11.30 18:33:20 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project
2023.11.30 18:33:26 INFO  [success] Generated .bloop\advent_of_code-build.json
2023.11.30 18:33:26 INFO  [success] Total time: 7 s, completed 30 Nov 2023, 18:33:27
2023.11.30 18:33:29 INFO  [info] loading settings for project root from build.sbt ...
2023.11.30 18:33:29 INFO  [info] set current project to Advent_of_code (in build file:/C:/dev/scala/Advent_of_code/)
2023.11.30 18:33:31 INFO  [success] Generated .bloop\root.json
2023.11.30 18:33:31 INFO  [success] Generated .bloop\root-test.json
2023.11.30 18:33:31 INFO  [success] Total time: 2 s, completed 30 Nov 2023, 18:33:31
2023.11.30 18:33:31 INFO  time: ran 'sbt bloopInstall' in 26s
2023.11.30 18:33:31 INFO  Attempting to connect to the build server...
2023.11.30 18:33:31 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 18:33:34 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 18:33:34 INFO  Attempting to connect to the build server...
2023.11.30 18:33:34 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 18:33:34 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 18:33:34 INFO  time: Connected to build server in 2.54s
2023.11.30 18:33:34 INFO  Connected to Build server: Bloop v1.5.11
2023.11.30 18:33:34 INFO  time: Imported build in 0.13s
2023.11.30 18:33:44 INFO  time: code lens generation in 4.57s
2023.11.30 18:33:45 INFO  time: code lens generation in 1.09s
2023.11.30 18:33:46 INFO  time: indexed workspace in 11s
2023.11.30 18:33:46 INFO  compiling root (1 scala source)
2023.11.30 18:33:47 INFO  compiling root-test (1 scala source)
2023.11.30 18:33:47 INFO  time: compiled root in 1.64s
2023.11.30 18:33:49 INFO  time: code lens generation in 1.76s
2023.11.30 18:33:49 INFO  time: code lens generation in 2.96s
2023.11.30 18:33:49 INFO  time: code lens generation in 1.29s
2023.11.30 18:33:49 INFO  time: compiled root-test in 2.32s
2023.11.30 18:33:55 INFO  skipping build import with status 'Dismissed'
2023.11.30 18:35:03 INFO  compiling root-test (1 scala source)
2023.11.30 18:35:04 INFO  time: compiled root-test in 1.44s
2023.11.30 18:36:07 INFO  compiling root-test (1 scala source)
2023.11.30 18:36:09 INFO  time: compiled root-test in 1.3s
2023.11.30 18:36:15 INFO  compiling root-test (1 scala source)
2023.11.30 18:36:17 INFO  time: compiled root-test in 1.33s
2023.11.30 18:36:17 INFO  compiling root-test (1 scala source)
2023.11.30 18:36:18 INFO  time: compiled root-test in 1.22s
2023.11.30 18:36:18 INFO  compiling root-test (1 scala source)
2023.11.30 18:36:18 INFO  time: compiled root-test in 0.53s
2023.11.30 18:36:46 INFO  compiling root-test (1 scala source)
2023.11.30 18:36:46 INFO  time: compiled root-test in 0.47s
2023.11.30 18:36:48 INFO  compiling root-test (1 scala source)
2023.11.30 18:36:48 INFO  time: compiled root-test in 0.36s
2023.11.30 18:36:55 INFO  compiling root-test (1 scala source)
2023.11.30 18:36:55 INFO  time: compiled root-test in 0.36s
2023.11.30 18:37:32 INFO  compiling root-test (1 scala source)
2023.11.30 18:37:32 INFO  time: compiled root-test in 0.38s
Nov 30, 2023 6:38:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 371
2023.11.30 18:39:08 INFO  running 'C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\rogier\AppData\Local\Temp\metals12132141078700985987\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2023.11.30 18:39:12 INFO  [info] welcome to sbt 1.9.7 (Eclipse Adoptium Java 11.0.21)
2023.11.30 18:39:14 INFO  [info] loading settings for project advent_of_code-build-build from metals.sbt ...
2023.11.30 18:39:15 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project\project
2023.11.30 18:39:17 INFO  [info] loading settings for project advent_of_code-build from metals.sbt ...
2023.11.30 18:39:17 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project
2023.11.30 18:39:21 INFO  [success] Generated .bloop\advent_of_code-build.json
2023.11.30 18:39:21 INFO  [success] Total time: 3 s, completed 30 Nov 2023, 18:39:21
2023.11.30 18:39:25 INFO  [info] loading settings for project advent_of_code from build.sbt ...
2023.11.30 18:39:25 INFO  [info] set current project to Advent of Code (in build file:/C:/dev/scala/Advent_of_code/)
2023.11.30 18:39:31 INFO  [success] Generated .bloop\advent_of_code.json
2023.11.30 18:39:31 INFO  [success] Generated .bloop\advent_of_code-test.json
2023.11.30 18:39:31 INFO  [warn] Removed stale C:\dev\scala\Advent_of_code\.bloop\root.json
2023.11.30 18:39:31 INFO  [warn] Removed stale C:\dev\scala\Advent_of_code\.bloop\root-test.json
2023.11.30 18:39:31 INFO  [success] Total time: 5 s, completed 30 Nov 2023, 18:39:31
2023.11.30 18:39:31 INFO  time: ran 'sbt bloopInstall' in 23s
2023.11.30 18:39:31 INFO  Disconnecting from Bloop session...
2023.11.30 18:39:31 INFO  Shut down connection with build server.
2023.11.30 18:39:31 INFO  Shut down connection with build server.
2023.11.30 18:39:31 INFO  Attempting to connect to the build server...
2023.11.30 18:39:31 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 18:39:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 18:39:31 INFO  Attempting to connect to the build server...
2023.11.30 18:39:31 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 18:39:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 18:39:31 INFO  time: Connected to build server in 0.11s
2023.11.30 18:39:31 INFO  Connected to Build server: Bloop v1.5.11
2023.11.30 18:39:34 INFO  time: indexed workspace in 2.78s
2023.11.30 18:39:34 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:39:36 INFO  time: compiled advent_of_code in 2.37s
2023.11.30 18:39:36 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:39:36 INFO  time: compiled advent_of_code-test in 34ms
2023.11.30 18:39:44 INFO  skipping build import with status 'Installed'
2023.11.30 18:40:01 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:40:01 INFO  time: compiled advent_of_code-test in 0.61s
2023.11.30 18:40:19 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:40:19 INFO  time: compiled advent_of_code-test in 0.51s
2023.11.30 18:41:20 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:41:20 INFO  time: compiled advent_of_code in 0.2s
2023.11.30 18:41:41 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:41:41 INFO  time: compiled advent_of_code in 0.18s
Nov 30, 2023 6:43:40 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2023.11.30 18:45:24 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:45:24 INFO  time: compiled advent_of_code-test in 0.69s
2023.11.30 18:45:44 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:45:44 INFO  time: compiled advent_of_code-test in 0.7s
Nov 30, 2023 6:46:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 577
2023.11.30 18:46:49 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:46:49 INFO  time: compiled advent_of_code-test in 0.15s
2023.11.30 18:47:15 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:47:15 INFO  time: compiled advent_of_code-test in 0.52s
2023.11.30 18:47:25 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:47:25 INFO  time: compiled advent_of_code-test in 0.52s
2023.11.30 18:48:45 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:48:45 INFO  time: compiled advent_of_code-test in 0.53s
2023.11.30 18:49:40 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:49:40 INFO  time: compiled advent_of_code in 0.12s
2023.11.30 18:50:23 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:50:23 INFO  time: compiled advent_of_code in 0.31s
2023.11.30 18:50:45 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:50:45 INFO  time: compiled advent_of_code in 0.11s
2023.11.30 18:50:51 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:50:51 INFO  time: compiled advent_of_code in 0.24s
2023.11.30 18:50:54 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:50:54 INFO  time: compiled advent_of_code-test in 0.64s
2023.11.30 18:56:23 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:56:23 INFO  time: compiled advent_of_code in 0.29s
2023.11.30 18:56:33 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:56:33 INFO  time: compiled advent_of_code in 0.27s
2023.11.30 18:56:53 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:56:53 INFO  time: compiled advent_of_code in 0.23s
2023.11.30 18:57:06 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:57:06 INFO  time: compiled advent_of_code in 0.25s
2023.11.30 18:57:09 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:57:09 INFO  time: compiled advent_of_code-test in 0.68s
2023.11.30 18:57:47 INFO  compiling advent_of_code-test (1 scala source)
2023.11.30 18:57:47 WARN  there were 2 deprecation warnings; re-run with -deprecation for details
2023.11.30 18:57:47 INFO  time: compiled advent_of_code-test in 0.38s
2023.11.30 18:59:48 INFO  compiling advent_of_code (1 scala source)
2023.11.30 18:59:48 INFO  time: compiled advent_of_code in 0.25s
2023.11.30 18:59:49 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:59:57 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:59:57 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 18:59:59 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:01 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:06 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:08 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:09 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:00:09 INFO  time: compiled advent_of_code in 0.22s
2023.11.30 19:00:10 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:31 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:33 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:33 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:35 WARN  Could not load snapshot text for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
2023.11.30 19:00:37 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:00:37 INFO  time: compiled advent_of_code in 0.2s
2023.11.30 19:00:46 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:00:46 INFO  time: compiled advent_of_code in 0.21s
2023.11.30 19:00:59 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:00:59 INFO  time: compiled advent_of_code in 0.21s
2023.11.30 19:01:04 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:01:04 INFO  time: compiled advent_of_code in 0.21s
2023.11.30 19:15:46 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 19:15:46 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 19:15:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 19:15:47 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 19:15:46 INFO  Connected to Build server: Bloop v1.5.11
2023.11.30 19:15:47 INFO  Connected to Build server: Bloop v1.5.11
2023.11.30 19:15:46 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 19:15:47 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.11.30 19:15:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 19:15:47 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:15:47 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.11.30 19:15:47 INFO  time: compiled advent_of_code in 0.38s
2023.11.30 19:15:47 INFO  time: Imported build in 0.48s
2023.11.30 19:15:49 INFO  time: indexed workspace in 2.25s
2023.11.30 19:15:49 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:15:52 INFO  time: compiled advent_of_code in 2.51s
2023.11.30 19:15:58 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:15:58 INFO  time: compiled advent_of_code in 0.29s
2023.11.30 19:16:05 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:16:05 INFO  time: compiled advent_of_code in 0.26s
2023.11.30 19:16:19 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:16:19 INFO  time: compiled advent_of_code in 0.22s
2023.11.30 19:16:39 INFO  compiling advent_of_code (1 scala source)
2023.11.30 19:16:39 INFO  time: compiled advent_of_code in 0.26s
Dec 01, 2023 1:01:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1687
2023.12.01 13:02:20 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 13:02:20 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 13:02:20 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 13:02:20 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 13:02:20 INFO  Connected to Build server: Bloop v1.5.11
2023.12.01 13:02:20 INFO  Connected to Build server: Bloop v1.5.11
2023.12.01 13:02:20 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 13:02:20 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 13:02:20 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 13:02:21 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:02:21 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 13:02:21 INFO  time: compiled advent_of_code in 0.39s
2023.12.01 13:02:21 INFO  time: Imported build in 0.46s
2023.12.01 13:02:22 INFO  time: indexed workspace in 1.34s
2023.12.01 13:02:22 ERROR Build server error: Empty build targets. Expected at least one build target identifier.
2023.12.01 13:02:24 INFO  no build target found for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala. Using presentation compiler with project's scala-library version: 3.3.1
2023.12.01 13:02:24 INFO  time: code lens generation in 2.73s
2023.12.01 13:02:24 INFO  time: code lens generation in 1.41s
2023.12.01 13:02:46 ERROR Failed to tokenize input for semantic tokens for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
scala.meta.tokenizers.TokenizeException: <input>:5: error: unclosed string interpolation
    input.split("map(_.split("\n").map(_.toInt).sum).toSeq
                                 ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:539)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)

2023.12.01 13:02:48 ERROR Failed to tokenize input for semantic tokens for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
scala.meta.tokenizers.TokenizeException: <input>:5: error: unclosed string interpolation
    input.split("\nmap(_.split("\n").map(_.toInt).sum).toSeq
                                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:539)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)

2023.12.01 13:02:48 ERROR Failed to tokenize input for semantic tokens for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
scala.meta.tokenizers.TokenizeException: <input>:5: error: unclosed string interpolation
    input.split("\n\nmap(_.split("\n").map(_.toInt).sum).toSeq
                                     ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:539)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)

Dec 01, 2023 1:10:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2080
2023.12.01 13:12:40 WARN  no build target for: C:\dev\scala\Advent_of_code\build.sbt
2023.12.01 13:12:40 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 13:12:40 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 13:12:46 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 13:12:46 WARN  no build target for: C:\dev\scala\Advent_of_code\build.sbt
2023.12.01 13:12:46 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 13:12:48 INFO  running 'C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\rogier\AppData\Local\Temp\metals15475687770254296872\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2023.12.01 13:12:53 INFO  [info] welcome to sbt 1.9.7 (Eclipse Adoptium Java 11.0.21)
2023.12.01 13:12:54 INFO  [info] loading settings for project advent_of_code-build-build from metals.sbt ...
2023.12.01 13:12:55 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project\project
2023.12.01 13:12:57 INFO  [info] loading settings for project advent_of_code-build from metals.sbt ...
2023.12.01 13:12:57 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project
2023.12.01 13:13:01 INFO  [success] Generated .bloop\advent_of_code-build.json
2023.12.01 13:13:01 INFO  [success] Total time: 3 s, completed 1 Dec 2023, 13:13:01
2023.12.01 13:13:04 INFO  [info] loading settings for project advent_of_code from build.sbt ...
2023.12.01 13:13:04 INFO  [info] set current project to Advent of Code (in build file:/C:/dev/scala/Advent_of_code/)
2023.12.01 13:13:06 INFO  [success] Generated .bloop\advent_of_code.json
2023.12.01 13:13:06 INFO  [success] Generated .bloop\advent_of_code-test.json
2023.12.01 13:13:06 INFO  [success] Total time: 2 s, completed 1 Dec 2023, 13:13:06
2023.12.01 13:13:07 INFO  time: ran 'sbt bloopInstall' in 18s
2023.12.01 13:13:07 INFO  Disconnecting from Bloop session...
2023.12.01 13:13:07 INFO  Shut down connection with build server.
2023.12.01 13:13:07 INFO  Shut down connection with build server.
2023.12.01 13:13:07 INFO  Failed to run request with params WorkspaceBuildTargetsResult
2023.12.01 13:13:07 INFO  Failed to run request with params WorkspaceBuildTargetsResult
2023.12.01 13:13:07 INFO  Attempting to connect to the build server...
2023.12.01 13:13:07 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 13:13:09 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 13:13:09 INFO  Attempting to connect to the build server...
2023.12.01 13:13:09 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 13:13:09 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 13:13:09 INFO  time: Connected to build server in 2.05s
2023.12.01 13:13:09 INFO  Connected to Build server: Bloop v1.5.11
2023.12.01 13:13:19 INFO  time: indexed workspace in 10s
2023.12.01 13:13:19 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:13:21 INFO  time: compiled advent_of_code in 1.9s
2023.12.01 13:13:21 INFO  compiling advent_of_code-test (1 scala source)
2023.12.01 13:13:21 INFO  time: compiled advent_of_code-test in 3ms
2023.12.01 13:13:22 INFO  time: code lens generation in 1.76s
2023.12.01 13:15:38 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:15:38 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:15:38 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:15:38 INFO  Loaded expression compiler in 12 milliseconds
2023.12.01 13:15:38 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:15:42 INFO  Loaded all sources and classes in 3 seconds
2023.12.01 13:15:42 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50827 .
2023.12.01 13:15:42 INFO  Attaching to debuggee VM succeeded.
Dec 01, 2023 1:16:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2,3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @HotSpotIntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null)\n            throw new NullPointerException(\"charsetName\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charsetName, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset \u003d\u003d null)\n            throw new NullPointerException(\"charset\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charset, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d StringCoding.decode(bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String aString \u003d (String)anObject;\n            if (coder() \u003d\u003d aString.coder()) {\n                return isLatin1() ? StringLatin1.equals(value, aString.value)\n                                  : StringUTF16.equals(value, aString.value);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        if (coder() \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (!isLatin1()) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two characters are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(char))}\n     *        on each character produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        if (coder() \u003d\u003d anotherString.coder()) {\n            return isLatin1() ? StringLatin1.compareTo(v1, v2)\n                              : StringUTF16.compareTo(v1, v2);\n        }\n        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)\n                          : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            if (s1.coder() \u003d\u003d s2.coder()) {\n                return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2)\n                                     : StringUTF16.compareToCI(v1, v2);\n            }\n            return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                 : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        if (coder() \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder() \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !\u003d\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        if (coder() \u003d\u003d other.coder()) {\n            return isLatin1()\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return isLatin1()\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        if (coder() \u003d\u003d prefix.coder()) {\n            int to \u003d isLatin1() ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (isLatin1()) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 value.length \u003e 0) {\n            hash \u003d h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                                  : StringUTF16.hashCode(value);\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        if (coder() \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder() \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgt         the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen \u003d length() - beginIndex;\n        if (subLen \u003c 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        if (beginIndex \u003d\u003d 0) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen \u003d endIndex - beginIndex;\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        if (coder() \u003d\u003d str.coder()) {\n            byte[] val \u003d this.value;\n            byte[] oval \u003d str.value;\n            int len \u003d val.length + oval.length;\n            byte[] buf \u003d Arrays.copyOf(val, len);\n            System.arraycopy(oval, 0, buf, val.length, oval.length);\n            return new String(buf, coder);\n        }\n        int len \u003d length();\n        int olen \u003d str.length();\n        byte[] buf \u003d StringUTF16.newBytesFor(len + olen);\n        getBytes(buf, 0, UTF16);\n        str.getBytes(buf, len, UTF16);\n        return new String(buf, UTF16);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String tgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int j \u003d indexOf(tgtStr);\n        if (j \u003c 0) {\n            return this;\n        }\n        int tgtLen \u003d tgtStr.length();\n        int tgtLen1 \u003d Math.max(tgtLen, 1);\n        int thisLen \u003d length();\n\n        int newLenHint \u003d thisLen - tgtLen + replStr.length();\n        if (newLenHint \u003c 0) {\n            throw new OutOfMemoryError();\n        }\n        StringBuilder sb \u003d new StringBuilder(newLenHint);\n        int i \u003d 0;\n        do {\n            sb.append(this, i, j).append(replStr);\n            i \u003d j + tgtLen;\n        } while (j \u003c thisLen \u0026\u0026 (j \u003d indexOf(tgtStr, j + tgtLen1)) \u003e 0);\n        return sb.append(this, i, thisLen).toString();\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@link Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@link Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@link Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    private int indexOfNonWhitespace() {\n        if (isLatin1()) {\n            return StringLatin1.indexOfNonWhitespace(value);\n        } else {\n            return StringUTF16.indexOfNonWhitespace(value);\n        }\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value)\n                          : StringUTF16.lines(value);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     * @jls 3.10.5 String Literals\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Repeating \" + len + \" bytes String \" + count +\n                    \" times will produce a String exceeding maximum size.\");\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte dst[], int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    private boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:320)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2023.12.01 13:16:21 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:372)
	scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	jdk.internal.reflect.GeneratedMethodAccessor10.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:16:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor10.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.MetalsLspService.documentHighlights(MetalsLspService.scala:1402)
	at scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:372)
	at scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Dec 01, 2023 1:16:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2244
Dec 01, 2023 1:16:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor15.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:608)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2023.12.01 13:16:21 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.semanticTokensFull(WorkspaceLspService.scala:462)
	scala.meta.metals.lsp.DelegatingScalaService.semanticTokensFull(DelegatingScalaService.scala:208)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:16:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2094)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.Compilers.semanticTokens(Compilers.scala:424)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$semanticTokensFull$2(MetalsLspService.scala:1556)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 12 more

2023.12.01 13:16:21 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:452)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:16:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1634)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1633)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:452)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 26 more

2023.12.01 13:16:21 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:447)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:16:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2094)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$3(MetalsLspService.scala:1624)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1623)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 13 more

2023.12.01 13:16:27 ERROR Build server error: [error response][stepIn]: Only one step request allowed per thread
2023.12.01 13:16:37 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:447)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:16:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2094)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$3(MetalsLspService.scala:1624)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1623)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 13 more

2023.12.01 13:16:39 ERROR Build server error: [error response][next]: Only one step request allowed per thread
2023.12.01 13:16:44 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:16:44 INFO  Closing debug server tcp://0.0.0.0:50823
2023.12.01 13:16:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:367)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:16:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:1027)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:685)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1383)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1381)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:367)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 28 more

Dec 01, 2023 1:16:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2023.12.01 13:16:50 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:16:50 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:16:50 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:16:51 INFO  Loaded expression compiler in 0 milliseconds
2023.12.01 13:16:51 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:16:52 INFO  Loaded all sources and classes in 1 second
2023.12.01 13:16:52 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50841 .
2023.12.01 13:16:52 INFO  Attaching to debuggee VM succeeded.
2023.12.01 13:17:47 ERROR Build server error: Exception in thread "main" java.lang.NumberFormatException: For input string: "5800
2023.12.01 13:17:47 ERROR Build server error: "
2023.12.01 13:17:47 ERROR Build server error: 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
2023.12.01 13:17:47 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:652)
2023.12.01 13:17:47 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:770)
2023.12.01 13:17:47 ERROR Build server error: 	at scala.collection.StringOps$.toInt$extension(StringOps.scala:908)
2023.12.01 13:17:47 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1$$anonfun$1(Day01.scala:7)
2023.12.01 13:17:47 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:17:47 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1(Day01.scala:7)
2023.12.01 13:17:47 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:17:47 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse(Day01.scala:7)
2023.12.01 13:17:47 ERROR Build server error: 	at AdventOfCode2022.Day01$.part1(Day01.scala:10)
2023.12.01 13:17:47 ERROR Build server error: 	at AdventOfCode2022.Day01$.main(Day01.scala:16)
2023.12.01 13:17:47 ERROR Build server error: 	at AdventOfCode2022.Day01.main(Day01.scala)
2023.12.01 13:17:47 INFO  Closing debug server tcp://0.0.0.0:50838
2023.12.01 13:17:48 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:18:01 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:18:01 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:18:02 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:18:02 INFO  Loaded expression compiler in 0 milliseconds
2023.12.01 13:18:02 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:18:03 INFO  Loaded all sources and classes in 1 second
2023.12.01 13:18:03 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50859 .
2023.12.01 13:18:03 INFO  Attaching to debuggee VM succeeded.
2023.12.01 13:20:18 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:20:18 INFO  Closing debug server tcp://0.0.0.0:50856
2023.12.01 13:20:21 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:20:21 INFO  time: compiled advent_of_code in 0.24s
2023.12.01 13:20:24 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:20:24 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:20:25 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:20:25 INFO  Loaded expression compiler in 0 milliseconds
2023.12.01 13:20:25 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:20:26 INFO  Loaded all sources and classes in 1 second
2023.12.01 13:20:26 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50902 .
2023.12.01 13:20:26 INFO  Attaching to debuggee VM succeeded.
2023.12.01 13:20:38 ERROR Build server error: Exception in thread "main" java.lang.NumberFormatException: For input string: "5800
2023.12.01 13:20:38 ERROR Build server error: "
2023.12.01 13:20:38 ERROR Build server error: 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
2023.12.01 13:20:38 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:652)
2023.12.01 13:20:38 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:770)
2023.12.01 13:20:38 ERROR Build server error: 	at scala.collection.StringOps$.toInt$extension(StringOps.scala:908)
2023.12.01 13:20:38 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1$$anonfun$1(Day01.scala:7)
2023.12.01 13:20:38 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:20:38 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1(Day01.scala:7)
2023.12.01 13:20:38 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:20:38 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse(Day01.scala:7)
2023.12.01 13:20:38 ERROR Build server error: 	at AdventOfCode2022.Day01$.part1(Day01.scala:10)
2023.12.01 13:20:38 ERROR Build server error: 	at AdventOfCode2022.Day01$.main(Day01.scala:16)
2023.12.01 13:20:38 ERROR Build server error: 	at AdventOfCode2022.Day01.main(Day01.scala)
2023.12.01 13:20:38 INFO  Closing debug server tcp://0.0.0.0:50899
2023.12.01 13:20:39 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
Dec 01, 2023 1:21:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2335
2023.12.01 13:21:22 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:21:22 INFO  time: compiled advent_of_code in 0.15s
2023.12.01 13:21:27 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:21:27 INFO  time: compiled advent_of_code in 0.13s
2023.12.01 13:21:37 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:21:37 INFO  time: compiled advent_of_code in 0.14s
2023.12.01 13:21:42 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:21:42 INFO  time: compiled advent_of_code in 0.11s
2023.12.01 13:21:46 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:21:46 INFO  time: compiled advent_of_code in 0.23s
2023.12.01 13:21:52 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:21:52 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:21:52 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:21:52 INFO  Loaded expression compiler in 0 milliseconds
2023.12.01 13:21:52 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:21:54 INFO  Loaded all sources and classes in 1 second
2023.12.01 13:21:54 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50928 .
2023.12.01 13:21:54 INFO  Attaching to debuggee VM succeeded.
2023.12.01 13:22:25 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:22:25 INFO  time: compiled advent_of_code in 0.2s
2023.12.01 13:22:29 ERROR Exception in thread "main" java.lang.NumberFormatException: For input string: "5800
2023.12.01 13:22:29 ERROR "
2023.12.01 13:22:29 ERROR 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
2023.12.01 13:22:29 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:652)
2023.12.01 13:22:29 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:770)
2023.12.01 13:22:29 ERROR Build server error: 	at scala.collection.StringOps$.toInt$extension(StringOps.scala:908)
2023.12.01 13:22:29 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1$$anonfun$1(Day01.scala:8)
2023.12.01 13:22:29 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:22:29 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1(Day01.scala:8)
2023.12.01 13:22:29 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:22:29 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse(Day01.scala:8)
2023.12.01 13:22:29 ERROR Build server error: 	at AdventOfCode2022.Day01$.part1(Day01.scala:11)
2023.12.01 13:22:29 ERROR Build server error: 	at AdventOfCode2022.Day01$.main(Day01.scala:17)
2023.12.01 13:22:29 ERROR Build server error: 	at AdventOfCode2022.Day01.main(Day01.scala)
2023.12.01 13:22:29 INFO  Closing debug server tcp://0.0.0.0:50924
2023.12.01 13:22:29 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:22:33 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:22:33 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:22:33 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:22:33 INFO  Loaded expression compiler in 0 milliseconds
2023.12.01 13:22:33 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:22:34 INFO  Loaded all sources and classes in 1 second
2023.12.01 13:22:34 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50941 .
2023.12.01 13:22:34 INFO  Attaching to debuggee VM succeeded.
Dec 01, 2023 1:22:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/Integer.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage java.lang;\n\nimport java.lang.annotation.Native;\nimport java.util.Objects;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.misc.VM;\n\nimport static java.lang.String.COMPACT_STRINGS;\nimport static java.lang.String.LATIN1;\nimport static java.lang.String.UTF16;\n\n/**\n * The {@code Integer} class wraps a value of the primitive type\n * {@code int} in an object. An object of type {@code Integer}\n * contains a single field whose type is {@code int}.\n *\n * \u003cp\u003eIn addition, this class provides several methods for converting\n * an {@code int} to a {@code String} and a {@code String} to an\n * {@code int}, as well as other constants and methods useful when\n * dealing with an {@code int}.\n *\n * \u003cp\u003eImplementation note: The implementations of the \"bit twiddling\"\n * methods (such as {@link #highestOneBit(int) highestOneBit} and\n * {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are\n * based on material from Henry S. Warren, Jr.\u0027s \u003ci\u003eHacker\u0027s\n * Delight\u003c/i\u003e, (Addison Wesley, 2002).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Josh Bloch\n * @author  Joseph D. Darcy\n * @since 1.0\n */\npublic final class Integer extends Number implements Comparable\u003cInteger\u003e {\n    /**\n     * A constant holding the minimum value an {@code int} can\n     * have, -2\u003csup\u003e31\u003c/sup\u003e.\n     */\n    @Native public static final int   MIN_VALUE \u003d 0x80000000;\n\n    /**\n     * A constant holding the maximum value an {@code int} can\n     * have, 2\u003csup\u003e31\u003c/sup\u003e-1.\n     */\n    @Native public static final int   MAX_VALUE \u003d 0x7fffffff;\n\n    /**\n     * The {@code Class} instance representing the primitive type\n     * {@code int}.\n     *\n     * @since   1.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static final Class\u003cInteger\u003e  TYPE \u003d (Class\u003cInteger\u003e) Class.getPrimitiveClass(\"int\");\n\n    /**\n     * All possible chars for representing a number as a String\n     */\n    static final char[] digits \u003d {\n        \u00270\u0027 , \u00271\u0027 , \u00272\u0027 , \u00273\u0027 , \u00274\u0027 , \u00275\u0027 ,\n        \u00276\u0027 , \u00277\u0027 , \u00278\u0027 , \u00279\u0027 , \u0027a\u0027 , \u0027b\u0027 ,\n        \u0027c\u0027 , \u0027d\u0027 , \u0027e\u0027 , \u0027f\u0027 , \u0027g\u0027 , \u0027h\u0027 ,\n        \u0027i\u0027 , \u0027j\u0027 , \u0027k\u0027 , \u0027l\u0027 , \u0027m\u0027 , \u0027n\u0027 ,\n        \u0027o\u0027 , \u0027p\u0027 , \u0027q\u0027 , \u0027r\u0027 , \u0027s\u0027 , \u0027t\u0027 ,\n        \u0027u\u0027 , \u0027v\u0027 , \u0027w\u0027 , \u0027x\u0027 , \u0027y\u0027 , \u0027z\u0027\n    };\n\n    /**\n     * Returns a string representation of the first argument in the\n     * radix specified by the second argument.\n     *\n     * \u003cp\u003eIf the radix is smaller than {@code Character.MIN_RADIX}\n     * or larger than {@code Character.MAX_RADIX}, then the radix\n     * {@code 10} is used instead.\n     *\n     * \u003cp\u003eIf the first argument is negative, the first element of the\n     * result is the ASCII minus character {@code \u0027-\u0027}\n     * ({@code \u0027\\u005Cu002D\u0027}). If the first argument is not\n     * negative, no sign character appears in the result.\n     *\n     * \u003cp\u003eThe remaining characters of the result represent the magnitude\n     * of the first argument. If the magnitude is zero, it is\n     * represented by a single zero character {@code \u00270\u0027}\n     * ({@code \u0027\\u005Cu0030\u0027}); otherwise, the first character of\n     * the representation of the magnitude will not be the zero\n     * character.  The following ASCII characters are used as digits:\n     *\n     * \u003cblockquote\u003e\n     *   {@code 0123456789abcdefghijklmnopqrstuvwxyz}\n     * \u003c/blockquote\u003e\n     *\n     * These are {@code \u0027\\u005Cu0030\u0027} through\n     * {@code \u0027\\u005Cu0039\u0027} and {@code \u0027\\u005Cu0061\u0027} through\n     * {@code \u0027\\u005Cu007A\u0027}. If {@code radix} is\n     * \u003cvar\u003eN\u003c/var\u003e, then the first \u003cvar\u003eN\u003c/var\u003e of these characters\n     * are used as radix-\u003cvar\u003eN\u003c/var\u003e digits in the order shown. Thus,\n     * the digits for hexadecimal (radix 16) are\n     * {@code 0123456789abcdef}. If uppercase letters are\n     * desired, the {@link java.lang.String#toUpperCase()} method may\n     * be called on the result:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Integer.toString(n, 16).toUpperCase()}\n     * \u003c/blockquote\u003e\n     *\n     * @param   i       an integer to be converted to a string.\n     * @param   radix   the radix to use in the string representation.\n     * @return  a string representation of the argument in the specified radix.\n     * @see     java.lang.Character#MAX_RADIX\n     * @see     java.lang.Character#MIN_RADIX\n     */\n    public static String toString(int i, int radix) {\n        if (radix \u003c Character.MIN_RADIX || radix \u003e Character.MAX_RADIX)\n            radix \u003d 10;\n\n        /* Use the faster version */\n        if (radix \u003d\u003d 10) {\n            return toString(i);\n        }\n\n        if (COMPACT_STRINGS) {\n            byte[] buf \u003d new byte[33];\n            boolean negative \u003d (i \u003c 0);\n            int charPos \u003d 32;\n\n            if (!negative) {\n                i \u003d -i;\n            }\n\n            while (i \u003c\u003d -radix) {\n                buf[charPos--] \u003d (byte)digits[-(i % radix)];\n                i \u003d i / radix;\n            }\n            buf[charPos] \u003d (byte)digits[-i];\n\n            if (negative) {\n                buf[--charPos] \u003d \u0027-\u0027;\n            }\n\n            return StringLatin1.newString(buf, charPos, (33 - charPos));\n        }\n        return toStringUTF16(i, radix);\n    }\n\n    private static String toStringUTF16(int i, int radix) {\n        byte[] buf \u003d new byte[33 * 2];\n        boolean negative \u003d (i \u003c 0);\n        int charPos \u003d 32;\n        if (!negative) {\n            i \u003d -i;\n        }\n        while (i \u003c\u003d -radix) {\n            StringUTF16.putChar(buf, charPos--, digits[-(i % radix)]);\n            i \u003d i / radix;\n        }\n        StringUTF16.putChar(buf, charPos, digits[-i]);\n\n        if (negative) {\n            StringUTF16.putChar(buf, --charPos, \u0027-\u0027);\n        }\n        return StringUTF16.newString(buf, charPos, (33 - charPos));\n    }\n\n    /**\n     * Returns a string representation of the first argument as an\n     * unsigned integer value in the radix specified by the second\n     * argument.\n     *\n     * \u003cp\u003eIf the radix is smaller than {@code Character.MIN_RADIX}\n     * or larger than {@code Character.MAX_RADIX}, then the radix\n     * {@code 10} is used instead.\n     *\n     * \u003cp\u003eNote that since the first argument is treated as an unsigned\n     * value, no leading sign character is printed.\n     *\n     * \u003cp\u003eIf the magnitude is zero, it is represented by a single zero\n     * character {@code \u00270\u0027} ({@code \u0027\\u005Cu0030\u0027}); otherwise,\n     * the first character of the representation of the magnitude will\n     * not be the zero character.\n     *\n     * \u003cp\u003eThe behavior of radixes and the characters used as digits\n     * are the same as {@link #toString(int, int) toString}.\n     *\n     * @param   i       an integer to be converted to an unsigned string.\n     * @param   radix   the radix to use in the string representation.\n     * @return  an unsigned string representation of the argument in the specified radix.\n     * @see     #toString(int, int)\n     * @since 1.8\n     */\n    public static String toUnsignedString(int i, int radix) {\n        return Long.toUnsignedString(toUnsignedLong(i), radix);\n    }\n\n    /**\n     * Returns a string representation of the integer argument as an\n     * unsigned integer in base\u0026nbsp;16.\n     *\n     * \u003cp\u003eThe unsigned integer value is the argument plus 2\u003csup\u003e32\u003c/sup\u003e\n     * if the argument is negative; otherwise, it is equal to the\n     * argument.  This value is converted to a string of ASCII digits\n     * in hexadecimal (base\u0026nbsp;16) with no extra leading\n     * {@code 0}s.\n     *\n     * \u003cp\u003eThe value of the argument can be recovered from the returned\n     * string {@code s} by calling {@link\n     * Integer#parseUnsignedInt(String, int)\n     * Integer.parseUnsignedInt(s, 16)}.\n     *\n     * \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n     * single zero character {@code \u00270\u0027} ({@code \u0027\\u005Cu0030\u0027});\n     * otherwise, the first character of the representation of the\n     * unsigned magnitude will not be the zero character. The\n     * following characters are used as hexadecimal digits:\n     *\n     * \u003cblockquote\u003e\n     *  {@code 0123456789abcdef}\n     * \u003c/blockquote\u003e\n     *\n     * These are the characters {@code \u0027\\u005Cu0030\u0027} through\n     * {@code \u0027\\u005Cu0039\u0027} and {@code \u0027\\u005Cu0061\u0027} through\n     * {@code \u0027\\u005Cu0066\u0027}. If uppercase letters are\n     * desired, the {@link java.lang.String#toUpperCase()} method may\n     * be called on the result:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Integer.toHexString(n).toUpperCase()}\n     * \u003c/blockquote\u003e\n     *\n     * @param   i   an integer to be converted to a string.\n     * @return  the string representation of the unsigned integer value\n     *          represented by the argument in hexadecimal (base\u0026nbsp;16).\n     * @see #parseUnsignedInt(String, int)\n     * @see #toUnsignedString(int, int)\n     * @since   1.0.2\n     */\n    public static String toHexString(int i) {\n        return toUnsignedString0(i, 4);\n    }\n\n    /**\n     * Returns a string representation of the integer argument as an\n     * unsigned integer in base\u0026nbsp;8.\n     *\n     * \u003cp\u003eThe unsigned integer value is the argument plus 2\u003csup\u003e32\u003c/sup\u003e\n     * if the argument is negative; otherwise, it is equal to the\n     * argument.  This value is converted to a string of ASCII digits\n     * in octal (base\u0026nbsp;8) with no extra leading {@code 0}s.\n     *\n     * \u003cp\u003eThe value of the argument can be recovered from the returned\n     * string {@code s} by calling {@link\n     * Integer#parseUnsignedInt(String, int)\n     * Integer.parseUnsignedInt(s, 8)}.\n     *\n     * \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n     * single zero character {@code \u00270\u0027} ({@code \u0027\\u005Cu0030\u0027});\n     * otherwise, the first character of the representation of the\n     * unsigned magnitude will not be the zero character. The\n     * following characters are used as octal digits:\n     *\n     * \u003cblockquote\u003e\n     * {@code 01234567}\n     * \u003c/blockquote\u003e\n     *\n     * These are the characters {@code \u0027\\u005Cu0030\u0027} through\n     * {@code \u0027\\u005Cu0037\u0027}.\n     *\n     * @param   i   an integer to be converted to a string.\n     * @return  the string representation of the unsigned integer value\n     *          represented by the argument in octal (base\u0026nbsp;8).\n     * @see #parseUnsignedInt(String, int)\n     * @see #toUnsignedString(int, int)\n     * @since   1.0.2\n     */\n    public static String toOctalString(int i) {\n        return toUnsignedString0(i, 3);\n    }\n\n    /**\n     * Returns a string representation of the integer argument as an\n     * unsigned integer in base\u0026nbsp;2.\n     *\n     * \u003cp\u003eThe unsigned integer value is the argument plus 2\u003csup\u003e32\u003c/sup\u003e\n     * if the argument is negative; otherwise it is equal to the\n     * argument.  This value is converted to a string of ASCII digits\n     * in binary (base\u0026nbsp;2) with no extra leading {@code 0}s.\n     *\n     * \u003cp\u003eThe value of the argument can be recovered from the returned\n     * string {@code s} by calling {@link\n     * Integer#parseUnsignedInt(String, int)\n     * Integer.parseUnsignedInt(s, 2)}.\n     *\n     * \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n     * single zero character {@code \u00270\u0027} ({@code \u0027\\u005Cu0030\u0027});\n     * otherwise, the first character of the representation of the\n     * unsigned magnitude will not be the zero character. The\n     * characters {@code \u00270\u0027} ({@code \u0027\\u005Cu0030\u0027}) and {@code\n     * \u00271\u0027} ({@code \u0027\\u005Cu0031\u0027}) are used as binary digits.\n     *\n     * @param   i   an integer to be converted to a string.\n     * @return  the string representation of the unsigned integer value\n     *          represented by the argument in binary (base\u0026nbsp;2).\n     * @see #parseUnsignedInt(String, int)\n     * @see #toUnsignedString(int, int)\n     * @since   1.0.2\n     */\n    public static String toBinaryString(int i) {\n        return toUnsignedString0(i, 1);\n    }\n\n    /**\n     * Convert the integer to an unsigned number.\n     */\n    private static String toUnsignedString0(int val, int shift) {\n        // assert shift \u003e 0 \u0026\u0026 shift \u003c\u003d5 : \"Illegal shift value\";\n        int mag \u003d Integer.SIZE - Integer.numberOfLeadingZeros(val);\n        int chars \u003d Math.max(((mag + (shift - 1)) / shift), 1);\n        if (COMPACT_STRINGS) {\n            byte[] buf \u003d new byte[chars];\n            formatUnsignedInt(val, shift, buf, 0, chars);\n            return new String(buf, LATIN1);\n        } else {\n            byte[] buf \u003d new byte[chars * 2];\n            formatUnsignedIntUTF16(val, shift, buf, 0, chars);\n            return new String(buf, UTF16);\n        }\n    }\n\n    /**\n     * Format an {@code int} (treated as unsigned) into a character buffer. If\n     * {@code len} exceeds the formatted ASCII representation of {@code val},\n     * {@code buf} will be padded with leading zeroes.\n     *\n     * @param val the unsigned int to format\n     * @param shift the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)\n     * @param buf the character buffer to write to\n     * @param offset the offset in the destination buffer to start at\n     * @param len the number of characters to write\n     */\n    static void formatUnsignedInt(int val, int shift, char[] buf, int offset, int len) {\n        // assert shift \u003e 0 \u0026\u0026 shift \u003c\u003d5 : \"Illegal shift value\";\n        // assert offset \u003e\u003d 0 \u0026\u0026 offset \u003c buf.length : \"illegal offset\";\n        // assert len \u003e 0 \u0026\u0026 (offset + len) \u003c\u003d buf.length : \"illegal length\";\n        int charPos \u003d offset + len;\n        int radix \u003d 1 \u003c\u003c shift;\n        int mask \u003d radix - 1;\n        do {\n            buf[--charPos] \u003d Integer.digits[val \u0026 mask];\n            val \u003e\u003e\u003e\u003d shift;\n        } while (charPos \u003e offset);\n    }\n\n    /** byte[]/LATIN1 version    */\n    static void formatUnsignedInt(int val, int shift, byte[] buf, int offset, int len) {\n        int charPos \u003d offset + len;\n        int radix \u003d 1 \u003c\u003c shift;\n        int mask \u003d radix - 1;\n        do {\n            buf[--charPos] \u003d (byte)Integer.digits[val \u0026 mask];\n            val \u003e\u003e\u003e\u003d shift;\n        } while (charPos \u003e offset);\n    }\n\n    /** byte[]/UTF16 version    */\n    private static void formatUnsignedIntUTF16(int val, int shift, byte[] buf, int offset, int len) {\n        int charPos \u003d offset + len;\n        int radix \u003d 1 \u003c\u003c shift;\n        int mask \u003d radix - 1;\n        do {\n            StringUTF16.putChar(buf, --charPos, Integer.digits[val \u0026 mask]);\n            val \u003e\u003e\u003e\u003d shift;\n        } while (charPos \u003e offset);\n    }\n\n    static final byte[] DigitTens \u003d {\n        \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027,\n        \u00271\u0027, \u00271\u0027, \u00271\u0027, \u00271\u0027, \u00271\u0027, \u00271\u0027, \u00271\u0027, \u00271\u0027, \u00271\u0027, \u00271\u0027,\n        \u00272\u0027, \u00272\u0027, \u00272\u0027, \u00272\u0027, \u00272\u0027, \u00272\u0027, \u00272\u0027, \u00272\u0027, \u00272\u0027, \u00272\u0027,\n        \u00273\u0027, \u00273\u0027, \u00273\u0027, \u00273\u0027, \u00273\u0027, \u00273\u0027, \u00273\u0027, \u00273\u0027, \u00273\u0027, \u00273\u0027,\n        \u00274\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027,\n        \u00275\u0027, \u00275\u0027, \u00275\u0027, \u00275\u0027, \u00275\u0027, \u00275\u0027, \u00275\u0027, \u00275\u0027, \u00275\u0027, \u00275\u0027,\n        \u00276\u0027, \u00276\u0027, \u00276\u0027, \u00276\u0027, \u00276\u0027, \u00276\u0027, \u00276\u0027, \u00276\u0027, \u00276\u0027, \u00276\u0027,\n        \u00277\u0027, \u00277\u0027, \u00277\u0027, \u00277\u0027, \u00277\u0027, \u00277\u0027, \u00277\u0027, \u00277\u0027, \u00277\u0027, \u00277\u0027,\n        \u00278\u0027, \u00278\u0027, \u00278\u0027, \u00278\u0027, \u00278\u0027, \u00278\u0027, \u00278\u0027, \u00278\u0027, \u00278\u0027, \u00278\u0027,\n        \u00279\u0027, \u00279\u0027, \u00279\u0027, \u00279\u0027, \u00279\u0027, \u00279\u0027, \u00279\u0027, \u00279\u0027, \u00279\u0027, \u00279\u0027,\n        } ;\n\n    static final byte[] DigitOnes \u003d {\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,\n        } ;\n\n\n    /**\n     * Returns a {@code String} object representing the\n     * specified integer. The argument is converted to signed decimal\n     * representation and returned as a string, exactly as if the\n     * argument and radix 10 were given as arguments to the {@link\n     * #toString(int, int)} method.\n     *\n     * @param   i   an integer to be converted.\n     * @return  a string representation of the argument in base\u0026nbsp;10.\n     */\n    @HotSpotIntrinsicCandidate\n    public static String toString(int i) {\n        int size \u003d stringSize(i);\n        if (COMPACT_STRINGS) {\n            byte[] buf \u003d new byte[size];\n            getChars(i, size, buf);\n            return new String(buf, LATIN1);\n        } else {\n            byte[] buf \u003d new byte[size * 2];\n            StringUTF16.getChars(i, size, buf);\n            return new String(buf, UTF16);\n        }\n    }\n\n    /**\n     * Returns a string representation of the argument as an unsigned\n     * decimal value.\n     *\n     * The argument is converted to unsigned decimal representation\n     * and returned as a string exactly as if the argument and radix\n     * 10 were given as arguments to the {@link #toUnsignedString(int,\n     * int)} method.\n     *\n     * @param   i  an integer to be converted to an unsigned string.\n     * @return  an unsigned string representation of the argument.\n     * @see     #toUnsignedString(int, int)\n     * @since 1.8\n     */\n    public static String toUnsignedString(int i) {\n        return Long.toString(toUnsignedLong(i));\n    }\n\n    /**\n     * Places characters representing the integer i into the\n     * character array buf. The characters are placed into\n     * the buffer backwards starting with the least significant\n     * digit at the specified index (exclusive), and working\n     * backwards from there.\n     *\n     * @implNote This method converts positive inputs into negative\n     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n     * integer.\n     *\n     * @param i     value to convert\n     * @param index next index, after the least significant digit\n     * @param buf   target buffer, Latin1-encoded\n     * @return index of the most significant digit or minus sign, if present\n     */\n    static int getChars(int i, int index, byte[] buf) {\n        int q, r;\n        int charPos \u003d index;\n\n        boolean negative \u003d i \u003c 0;\n        if (!negative) {\n            i \u003d -i;\n        }\n\n        // Generate two digits per iteration\n        while (i \u003c\u003d -100) {\n            q \u003d i / 100;\n            r \u003d (q * 100) - i;\n            i \u003d q;\n            buf[--charPos] \u003d DigitOnes[r];\n            buf[--charPos] \u003d DigitTens[r];\n        }\n\n        // We know there are at most two digits left at this point.\n        q \u003d i / 10;\n        r \u003d (q * 10) - i;\n        buf[--charPos] \u003d (byte)(\u00270\u0027 + r);\n\n        // Whatever left is the remaining digit.\n        if (q \u003c 0) {\n            buf[--charPos] \u003d (byte)(\u00270\u0027 - q);\n        }\n\n        if (negative) {\n            buf[--charPos] \u003d (byte)\u0027-\u0027;\n        }\n        return charPos;\n    }\n\n    // Left here for compatibility reasons, see JDK-8143900.\n    static final int [] sizeTable \u003d { 9, 99, 999, 9999, 99999, 999999, 9999999,\n                                      99999999, 999999999, Integer.MAX_VALUE };\n\n    /**\n     * Returns the string representation size for a given int value.\n     *\n     * @param x int value\n     * @return string size\n     *\n     * @implNote There are other ways to compute this: e.g. binary search,\n     * but values are biased heavily towards zero, and therefore linear search\n     * wins. The iteration results are also routinely inlined in the generated\n     * code after loop unrolling.\n     */\n    static int stringSize(int x) {\n        int d \u003d 1;\n        if (x \u003e\u003d 0) {\n            d \u003d 0;\n            x \u003d -x;\n        }\n        int p \u003d -10;\n        for (int i \u003d 1; i \u003c 10; i++) {\n            if (x \u003e p)\n                return i + d;\n            p \u003d 10 * p;\n        }\n        return 10 + d;\n    }\n\n    /**\n     * Parses the string argument as a signed integer in the radix\n     * specified by the second argument. The characters in the string\n     * must all be digits of the specified radix (as determined by\n     * whether {@link java.lang.Character#digit(char, int)} returns a\n     * nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code \u0027-\u0027} ({@code \u0027\\u005Cu002D\u0027}) to\n     * indicate a negative value or an ASCII plus sign {@code \u0027+\u0027}\n     * ({@code \u0027\\u005Cu002B\u0027}) to indicate a positive value. The\n     * resulting integer value is returned.\n     *\n     * \u003cp\u003eAn exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eThe first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * \u003cli\u003eThe radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * \u003cli\u003eAny character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code \u0027-\u0027} ({@code \u0027\\u005Cu002D\u0027}) or plus sign\n     * {@code \u0027+\u0027} ({@code \u0027\\u005Cu002B\u0027}) provided that the\n     * string is longer than length 1.\n     *\n     * \u003cli\u003eThe value represented by the string is not a value of type\n     * {@code int}.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eExamples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * parseInt(\"0\", 10) returns 0\n     * parseInt(\"473\", 10) returns 473\n     * parseInt(\"+42\", 10) returns 42\n     * parseInt(\"-0\", 10) returns 0\n     * parseInt(\"-FF\", 16) returns -255\n     * parseInt(\"1100110\", 2) returns 102\n     * parseInt(\"2147483647\", 10) returns 2147483647\n     * parseInt(\"-2147483648\", 10) returns -2147483648\n     * parseInt(\"2147483648\", 10) throws a NumberFormatException\n     * parseInt(\"99\", 8) throws a NumberFormatException\n     * parseInt(\"Kona\", 10) throws a NumberFormatException\n     * parseInt(\"Kona\", 27) returns 411787\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      s   the {@code String} containing the integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @exception  NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     */\n    public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n        /*\n         * WARNING: This method may be invoked early during VM initialization\n         * before IntegerCache is initialized. Care must be taken to not use\n         * the valueOf method.\n         */\n\n        if (s \u003d\u003d null) {\n            throw new NumberFormatException(\"null\");\n        }\n\n        if (radix \u003c Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n\n        if (radix \u003e Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        boolean negative \u003d false;\n        int i \u003d 0, len \u003d s.length();\n        int limit \u003d -Integer.MAX_VALUE;\n\n        if (len \u003e 0) {\n            char firstChar \u003d s.charAt(0);\n            if (firstChar \u003c \u00270\u0027) { // Possible leading \"+\" or \"-\"\n                if (firstChar \u003d\u003d \u0027-\u0027) {\n                    negative \u003d true;\n                    limit \u003d Integer.MIN_VALUE;\n                } else if (firstChar !\u003d \u0027+\u0027) {\n                    throw NumberFormatException.forInputString(s);\n                }\n\n                if (len \u003d\u003d 1) { // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forInputString(s);\n                }\n                i++;\n            }\n            int multmin \u003d limit / radix;\n            int result \u003d 0;\n            while (i \u003c len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                int digit \u003d Character.digit(s.charAt(i++), radix);\n                if (digit \u003c 0 || result \u003c multmin) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result *\u003d radix;\n                if (result \u003c limit + digit) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result -\u003d digit;\n            }\n            return negative ? result : -result;\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }\n\n    /**\n     * Parses the {@link CharSequence} argument as a signed {@code int} in the\n     * specified {@code radix}, beginning at the specified {@code beginIndex}\n     * and extending to {@code endIndex - 1}.\n     *\n     * \u003cp\u003eThe method does not take steps to guard against the\n     * {@code CharSequence} being mutated while parsing.\n     *\n     * @param      s   the {@code CharSequence} containing the {@code int}\n     *                  representation to be parsed\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the signed {@code int} represented by the subsequence in\n     *             the specified radix.\n     * @throws     NullPointerException  if {@code s} is null.\n     * @throws     IndexOutOfBoundsException  if {@code beginIndex} is\n     *             negative, or if {@code beginIndex} is greater than\n     *             {@code endIndex} or if {@code endIndex} is greater than\n     *             {@code s.length()}.\n     * @throws     NumberFormatException  if the {@code CharSequence} does not\n     *             contain a parsable {@code int} in the specified\n     *             {@code radix}, or if {@code radix} is either smaller than\n     *             {@link java.lang.Character#MIN_RADIX} or larger than\n     *             {@link java.lang.Character#MAX_RADIX}.\n     * @since  9\n     */\n    public static int parseInt(CharSequence s, int beginIndex, int endIndex, int radix)\n                throws NumberFormatException {\n        s \u003d Objects.requireNonNull(s);\n\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex || endIndex \u003e s.length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (radix \u003c Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n        if (radix \u003e Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        boolean negative \u003d false;\n        int i \u003d beginIndex;\n        int limit \u003d -Integer.MAX_VALUE;\n\n        if (i \u003c endIndex) {\n            char firstChar \u003d s.charAt(i);\n            if (firstChar \u003c \u00270\u0027) { // Possible leading \"+\" or \"-\"\n                if (firstChar \u003d\u003d \u0027-\u0027) {\n                    negative \u003d true;\n                    limit \u003d Integer.MIN_VALUE;\n                } else if (firstChar !\u003d \u0027+\u0027) {\n                    throw NumberFormatException.forCharSequence(s, beginIndex,\n                            endIndex, i);\n                }\n                i++;\n                if (i \u003d\u003d endIndex) { // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forCharSequence(s, beginIndex,\n                            endIndex, i);\n                }\n            }\n            int multmin \u003d limit / radix;\n            int result \u003d 0;\n            while (i \u003c endIndex) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                int digit \u003d Character.digit(s.charAt(i), radix);\n                if (digit \u003c 0 || result \u003c multmin) {\n                    throw NumberFormatException.forCharSequence(s, beginIndex,\n                            endIndex, i);\n                }\n                result *\u003d radix;\n                if (result \u003c limit + digit) {\n                    throw NumberFormatException.forCharSequence(s, beginIndex,\n                            endIndex, i);\n                }\n                i++;\n                result -\u003d digit;\n            }\n            return negative ? result : -result;\n        } else {\n            throw NumberFormatException.forInputString(\"\");\n        }\n    }\n\n    /**\n     * Parses the string argument as a signed decimal integer. The\n     * characters in the string must all be decimal digits, except\n     * that the first character may be an ASCII minus sign {@code \u0027-\u0027}\n     * ({@code \u0027\\u005Cu002D\u0027}) to indicate a negative value or an\n     * ASCII plus sign {@code \u0027+\u0027} ({@code \u0027\\u005Cu002B\u0027}) to\n     * indicate a positive value. The resulting integer value is\n     * returned, exactly as if the argument and the radix 10 were\n     * given as arguments to the {@link #parseInt(java.lang.String,\n     * int)} method.\n     *\n     * @param s    a {@code String} containing the {@code int}\n     *             representation to be parsed\n     * @return     the integer value represented by the argument in decimal.\n     * @exception  NumberFormatException  if the string does not contain a\n     *               parsable integer.\n     */\n    public static int parseInt(String s) throws NumberFormatException {\n        return parseInt(s,10);\n    }\n\n    /**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code \u0027+\u0027} ({@code \u0027\\u005Cu002B\u0027}). The resulting\n     * integer value is returned.\n     *\n     * \u003cp\u003eAn exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eThe first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * \u003cli\u003eThe radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * \u003cli\u003eAny character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code \u0027+\u0027} ({@code \u0027\\u005Cu002B\u0027}) provided that the\n     * string is longer than length 1.\n     *\n     * \u003cli\u003eThe value represented by the string is larger than the\n     * largest unsigned {@code int}, 2\u003csup\u003e32\u003c/sup\u003e-1.\n     *\n     * \u003c/ul\u003e\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s \u003d\u003d null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len \u003d s.length();\n        if (len \u003e 0) {\n            char firstChar \u003d s.charAt(0);\n            if (firstChar \u003d\u003d \u0027-\u0027) {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len \u003c\u003d 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix \u003d\u003d 10 \u0026\u0026 len \u003c\u003d 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell \u003d Long.parseLong(s, radix);\n                    if ((ell \u0026 0xffff_ffff_0000_0000L) \u003d\u003d 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }\n\n    /**\n     * Parses the {@link CharSequence} argument as an unsigned {@code int} in\n     * the specified {@code radix}, beginning at the specified\n     * {@code beginIndex} and extending to {@code endIndex - 1}.\n     *\n     * \u003cp\u003eThe method does not take steps to guard against the\n     * {@code CharSequence} being mutated while parsing.\n     *\n     * @param      s   the {@code CharSequence} containing the unsigned\n     *                 {@code int} representation to be parsed\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the unsigned {@code int} represented by the subsequence in\n     *             the specified radix.\n     * @throws     NullPointerException  if {@code s} is null.\n     * @throws     IndexOutOfBoundsException  if {@code beginIndex} is\n     *             negative, or if {@code beginIndex} is greater than\n     *             {@code endIndex} or if {@code endIndex} is greater than\n     *             {@code s.length()}.\n     * @throws     NumberFormatException  if the {@code CharSequence} does not\n     *             contain a parsable unsigned {@code int} in the specified\n     *             {@code radix}, or if {@code radix} is either smaller than\n     *             {@link java.lang.Character#MIN_RADIX} or larger than\n     *             {@link java.lang.Character#MAX_RADIX}.\n     * @since  9\n     */\n    public static int parseUnsignedInt(CharSequence s, int beginIndex, int endIndex, int radix)\n                throws NumberFormatException {\n        s \u003d Objects.requireNonNull(s);\n\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex || endIndex \u003e s.length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        int start \u003d beginIndex, len \u003d endIndex - beginIndex;\n\n        if (len \u003e 0) {\n            char firstChar \u003d s.charAt(start);\n            if (firstChar \u003d\u003d \u0027-\u0027) {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len \u003c\u003d 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                        (radix \u003d\u003d 10 \u0026\u0026 len \u003c\u003d 9)) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, start, start + len, radix);\n                } else {\n                    long ell \u003d Long.parseLong(s, start, start + len, radix);\n                    if ((ell \u0026 0xffff_ffff_0000_0000L) \u003d\u003d 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw new NumberFormatException(\"\");\n        }\n    }\n\n    /**\n     * Parses the string argument as an unsigned decimal integer. The\n     * characters in the string must all be decimal digits, except\n     * that the first character may be an ASCII plus sign {@code\n     * \u0027+\u0027} ({@code \u0027\\u005Cu002B\u0027}). The resulting integer value\n     * is returned, exactly as if the argument and the radix 10 were\n     * given as arguments to the {@link\n     * #parseUnsignedInt(java.lang.String, int)} method.\n     *\n     * @param s   a {@code String} containing the unsigned {@code int}\n     *            representation to be parsed\n     * @return    the unsigned integer value represented by the argument in decimal.\n     * @throws    NumberFormatException  if the string does not contain a\n     *            parsable unsigned integer.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s) throws NumberFormatException {\n        return parseUnsignedInt(s, 10);\n    }\n\n    /**\n     * Returns an {@code Integer} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed integer in the radix\n     * specified by the second argument, exactly as if the arguments\n     * were given to the {@link #parseInt(java.lang.String, int)}\n     * method. The result is an {@code Integer} object that\n     * represents the integer value specified by the string.\n     *\n     * \u003cp\u003eIn other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * \u003cblockquote\u003e\n     *  {@code new Integer(Integer.parseInt(s, radix))}\n     * \u003c/blockquote\u003e\n     *\n     * @param      s   the string to be parsed.\n     * @param      radix the radix to be used in interpreting {@code s}\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @exception NumberFormatException if the {@code String}\n     *            does not contain a parsable {@code int}.\n     */\n    public static Integer valueOf(String s, int radix) throws NumberFormatException {\n        return Integer.valueOf(parseInt(s,radix));\n    }\n\n    /**\n     * Returns an {@code Integer} object holding the\n     * value of the specified {@code String}. The argument is\n     * interpreted as representing a signed decimal integer, exactly\n     * as if the argument were given to the {@link\n     * #parseInt(java.lang.String)} method. The result is an\n     * {@code Integer} object that represents the integer value\n     * specified by the string.\n     *\n     * \u003cp\u003eIn other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * \u003cblockquote\u003e\n     *  {@code new Integer(Integer.parseInt(s))}\n     * \u003c/blockquote\u003e\n     *\n     * @param      s   the string to be parsed.\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument.\n     * @exception  NumberFormatException  if the string cannot be parsed\n     *             as an integer.\n     */\n    public static Integer valueOf(String s) throws NumberFormatException {\n        return Integer.valueOf(parseInt(s, 10));\n    }\n\n    /**\n     * Cache to support the object identity semantics of autoboxing for values between\n     * -128 and 127 (inclusive) as required by JLS.\n     *\n     * The cache is initialized on first usage.  The size of the cache\n     * may be controlled by the {@code -XX:AutoBoxCacheMax\u003d\u003csize\u003e} option.\n     * During VM initialization, java.lang.Integer.IntegerCache.high property\n     * may be set and saved in the private system properties in the\n     * jdk.internal.misc.VM class.\n     */\n\n    private static class IntegerCache {\n        static final int low \u003d -128;\n        static final int high;\n        static final Integer[] cache;\n        static Integer[] archivedCache;\n\n        static {\n            // high value may be configured by property\n            int h \u003d 127;\n            String integerCacheHighPropValue \u003d\n                VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue !\u003d null) {\n                try {\n                    int i \u003d parseInt(integerCacheHighPropValue);\n                    i \u003d Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h \u003d Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high \u003d h;\n\n            // Load IntegerCache.archivedCache from archive, if possible\n            VM.initializeFromArchive(IntegerCache.class);\n            int size \u003d (high - low) + 1;\n\n            // Use the archived cache if it exists and is large enough\n            if (archivedCache \u003d\u003d null || size \u003e archivedCache.length) {\n                Integer[] c \u003d new Integer[size];\n                int j \u003d low;\n                for(int k \u003d 0; k \u003c c.length; k++)\n                    c[k] \u003d new Integer(j++);\n                archivedCache \u003d c;\n            }\n            cache \u003d archivedCache;\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high \u003e\u003d 127;\n        }\n\n        private IntegerCache() {}\n    }\n\n    /**\n     * Returns an {@code Integer} instance representing the specified\n     * {@code int} value.  If a new {@code Integer} instance is not\n     * required, this method should generally be used in preference to\n     * the constructor {@link #Integer(int)}, as this method is likely\n     * to yield significantly better space and time performance by\n     * caching frequently requested values.\n     *\n     * This method will always cache values in the range -128 to 127,\n     * inclusive, and may cache other values outside of this range.\n     *\n     * @param  i an {@code int} value.\n     * @return an {@code Integer} instance representing {@code i}.\n     * @since  1.5\n     */\n    @HotSpotIntrinsicCandidate\n    public static Integer valueOf(int i) {\n        if (i \u003e\u003d IntegerCache.low \u0026\u0026 i \u003c\u003d IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n\n    /**\n     * The value of the {@code Integer}.\n     *\n     * @serial\n     */\n    private final int value;\n\n    /**\n     * Constructs a newly allocated {@code Integer} object that\n     * represents the specified {@code int} value.\n     *\n     * @param   value   the value to be represented by the\n     *                  {@code Integer} object.\n     *\n     * @deprecated\n     * It is rarely appropriate to use this constructor. The static factory\n     * {@link #valueOf(int)} is generally a better choice, as it is\n     * likely to yield significantly better space and time performance.\n     */\n    @Deprecated(since\u003d\"9\")\n    public Integer(int value) {\n        this.value \u003d value;\n    }\n\n    /**\n     * Constructs a newly allocated {@code Integer} object that\n     * represents the {@code int} value indicated by the\n     * {@code String} parameter. The string is converted to an\n     * {@code int} value in exactly the manner used by the\n     * {@code parseInt} method for radix 10.\n     *\n     * @param   s   the {@code String} to be converted to an {@code Integer}.\n     * @throws      NumberFormatException if the {@code String} does not\n     *              contain a parsable integer.\n     *\n     * @deprecated\n     * It is rarely appropriate to use this constructor.\n     * Use {@link #parseInt(String)} to convert a string to a\n     * {@code int} primitive, or use {@link #valueOf(String)}\n     * to convert a string to an {@code Integer} object.\n     */\n    @Deprecated(since\u003d\"9\")\n    public Integer(String s) throws NumberFormatException {\n        this.value \u003d parseInt(s, 10);\n    }\n\n    /**\n     * Returns the value of this {@code Integer} as a {@code byte}\n     * after a narrowing primitive conversion.\n     * @jls 5.1.3 Narrowing Primitive Conversions\n     */\n    public byte byteValue() {\n        return (byte)value;\n    }\n\n    /**\n     * Returns the value of this {@code Integer} as a {@code short}\n     * after a narrowing primitive conversion.\n     * @jls 5.1.3 Narrowing Primitive Conversions\n     */\n    public short shortValue() {\n        return (short)value;\n    }\n\n    /**\n     * Returns the value of this {@code Integer} as an\n     * {@code int}.\n     */\n    @HotSpotIntrinsicCandidate\n    public int intValue() {\n        return value;\n    }\n\n    /**\n     * Returns the value of this {@code Integer} as a {@code long}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     * @see Integer#toUnsignedLong(int)\n     */\n    public long longValue() {\n        return (long)value;\n    }\n\n    /**\n     * Returns the value of this {@code Integer} as a {@code float}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public float floatValue() {\n        return (float)value;\n    }\n\n    /**\n     * Returns the value of this {@code Integer} as a {@code double}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public double doubleValue() {\n        return (double)value;\n    }\n\n    /**\n     * Returns a {@code String} object representing this\n     * {@code Integer}\u0027s value. The value is converted to signed\n     * decimal representation and returned as a string, exactly as if\n     * the integer value were given as an argument to the {@link\n     * java.lang.Integer#toString(int)} method.\n     *\n     * @return  a string representation of the value of this object in\n     *          base\u0026nbsp;10.\n     */\n    public String toString() {\n        return toString(value);\n    }\n\n    /**\n     * Returns a hash code for this {@code Integer}.\n     *\n     * @return  a hash code value for this object, equal to the\n     *          primitive {@code int} value represented by this\n     *          {@code Integer} object.\n     */\n    @Override\n    public int hashCode() {\n        return Integer.hashCode(value);\n    }\n\n    /**\n     * Returns a hash code for an {@code int} value; compatible with\n     * {@code Integer.hashCode()}.\n     *\n     * @param value the value to hash\n     * @since 1.8\n     *\n     * @return a hash code value for an {@code int} value.\n     */\n    public static int hashCode(int value) {\n        return value;\n    }\n\n    /**\n     * Compares this object to the specified object.  The result is\n     * {@code true} if and only if the argument is not\n     * {@code null} and is an {@code Integer} object that\n     * contains the same {@code int} value as this object.\n     *\n     * @param   obj   the object to compare with.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     */\n    public boolean equals(Object obj) {\n        if (obj instanceof Integer) {\n            return value \u003d\u003d ((Integer)obj).intValue();\n        }\n        return false;\n    }\n\n    /**\n     * Determines the integer value of the system property with the\n     * specified name.\n     *\n     * \u003cp\u003eThe first argument is treated as the name of a system\n     * property.  System properties are accessible through the {@link\n     * java.lang.System#getProperty(java.lang.String)} method. The\n     * string value of this property is then interpreted as an integer\n     * value using the grammar supported by {@link Integer#decode decode} and\n     * an {@code Integer} object representing this value is returned.\n     *\n     * \u003cp\u003eIf there is no property with the specified name, if the\n     * specified name is empty or {@code null}, or if the property\n     * does not have the correct numeric format, then {@code null} is\n     * returned.\n     *\n     * \u003cp\u003eIn other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * \u003cblockquote\u003e\n     *  {@code getInteger(nm, null)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   nm   property name.\n     * @return  the {@code Integer} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     java.lang.System#getProperty(java.lang.String)\n     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n     */\n    public static Integer getInteger(String nm) {\n        return getInteger(nm, null);\n    }\n\n    /**\n     * Determines the integer value of the system property with the\n     * specified name.\n     *\n     * \u003cp\u003eThe first argument is treated as the name of a system\n     * property.  System properties are accessible through the {@link\n     * java.lang.System#getProperty(java.lang.String)} method. The\n     * string value of this property is then interpreted as an integer\n     * value using the grammar supported by {@link Integer#decode decode} and\n     * an {@code Integer} object representing this value is returned.\n     *\n     * \u003cp\u003eThe second argument is the default value. An {@code Integer} object\n     * that represents the value of the second argument is returned if there\n     * is no property of the specified name, if the property does not have\n     * the correct numeric format, or if the specified name is empty or\n     * {@code null}.\n     *\n     * \u003cp\u003eIn other words, this method returns an {@code Integer} object\n     * equal to the value of:\n     *\n     * \u003cblockquote\u003e\n     *  {@code getInteger(nm, new Integer(val))}\n     * \u003c/blockquote\u003e\n     *\n     * but in practice it may be implemented in a manner such as:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Integer result \u003d getInteger(nm, null);\n     * return (result \u003d\u003d null) ? new Integer(val) : result;\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * to avoid the unnecessary allocation of an {@code Integer}\n     * object when the default value is not needed.\n     *\n     * @param   nm   property name.\n     * @param   val   default value.\n     * @return  the {@code Integer} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     java.lang.System#getProperty(java.lang.String)\n     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n     */\n    public static Integer getInteger(String nm, int val) {\n        Integer result \u003d getInteger(nm, null);\n        return (result \u003d\u003d null) ? Integer.valueOf(val) : result;\n    }\n\n    /**\n     * Returns the integer value of the system property with the\n     * specified name.  The first argument is treated as the name of a\n     * system property.  System properties are accessible through the\n     * {@link java.lang.System#getProperty(java.lang.String)} method.\n     * The string value of this property is then interpreted as an\n     * integer value, as per the {@link Integer#decode decode} method,\n     * and an {@code Integer} object representing this value is\n     * returned; in summary:\n     *\n     * \u003cul\u003e\u003cli\u003eIf the property value begins with the two ASCII characters\n     *         {@code 0x} or the ASCII character {@code #}, not\n     *      followed by a minus sign, then the rest of it is parsed as a\n     *      hexadecimal integer exactly as by the method\n     *      {@link #valueOf(java.lang.String, int)} with radix 16.\n     * \u003cli\u003eIf the property value begins with the ASCII character\n     *     {@code 0} followed by another character, it is parsed as an\n     *     octal integer exactly as by the method\n     *     {@link #valueOf(java.lang.String, int)} with radix 8.\n     * \u003cli\u003eOtherwise, the property value is parsed as a decimal integer\n     * exactly as by the method {@link #valueOf(java.lang.String, int)}\n     * with radix 10.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe second argument is the default value. The default value is\n     * returned if there is no property of the specified name, if the\n     * property does not have the correct numeric format, or if the\n     * specified name is empty or {@code null}.\n     *\n     * @param   nm   property name.\n     * @param   val   default value.\n     * @return  the {@code Integer} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     System#getProperty(java.lang.String)\n     * @see     System#getProperty(java.lang.String, java.lang.String)\n     */\n    public static Integer getInteger(String nm, Integer val) {\n        String v \u003d null;\n        try {\n            v \u003d System.getProperty(nm);\n        } catch (IllegalArgumentException | NullPointerException e) {\n        }\n        if (v !\u003d null) {\n            try {\n                return Integer.decode(v);\n            } catch (NumberFormatException e) {\n            }\n        }\n        return val;\n    }\n\n    /**\n     * Decodes a {@code String} into an {@code Integer}.\n     * Accepts decimal, hexadecimal, and octal numbers given\n     * by the following grammar:\n     *\n     * \u003cblockquote\u003e\n     * \u003cdl\u003e\n     * \u003cdt\u003e\u003ci\u003eDecodableString:\u003c/i\u003e\n     * \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e DecimalNumeral\u003c/i\u003e\n     * \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0x} \u003ci\u003eHexDigits\u003c/i\u003e\n     * \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0X} \u003ci\u003eHexDigits\u003c/i\u003e\n     * \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code #} \u003ci\u003eHexDigits\u003c/i\u003e\n     * \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0} \u003ci\u003eOctalDigits\u003c/i\u003e\n     *\n     * \u003cdt\u003e\u003ci\u003eSign:\u003c/i\u003e\n     * \u003cdd\u003e{@code -}\n     * \u003cdd\u003e{@code +}\n     * \u003c/dl\u003e\n     * \u003c/blockquote\u003e\n     *\n     * \u003ci\u003eDecimalNumeral\u003c/i\u003e, \u003ci\u003eHexDigits\u003c/i\u003e, and \u003ci\u003eOctalDigits\u003c/i\u003e\n     * are as defined in section 3.10.1 of\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e,\n     * except that underscores are not accepted between digits.\n     *\n     * \u003cp\u003eThe sequence of characters following an optional\n     * sign and/or radix specifier (\"{@code 0x}\", \"{@code 0X}\",\n     * \"{@code #}\", or leading zero) is parsed as by the {@code\n     * Integer.parseInt} method with the indicated radix (10, 16, or\n     * 8).  This sequence of characters must represent a positive\n     * value or a {@link NumberFormatException} will be thrown.  The\n     * result is negated if first character of the specified {@code\n     * String} is the minus sign.  No whitespace characters are\n     * permitted in the {@code String}.\n     *\n     * @param     nm the {@code String} to decode.\n     * @return    an {@code Integer} object holding the {@code int}\n     *             value represented by {@code nm}\n     * @exception NumberFormatException  if the {@code String} does not\n     *            contain a parsable integer.\n     * @see java.lang.Integer#parseInt(java.lang.String, int)\n     */\n    public static Integer decode(String nm) throws NumberFormatException {\n        int radix \u003d 10;\n        int index \u003d 0;\n        boolean negative \u003d false;\n        Integer result;\n\n        if (nm.isEmpty())\n            throw new NumberFormatException(\"Zero length string\");\n        char firstChar \u003d nm.charAt(0);\n        // Handle sign, if present\n        if (firstChar \u003d\u003d \u0027-\u0027) {\n            negative \u003d true;\n            index++;\n        } else if (firstChar \u003d\u003d \u0027+\u0027)\n            index++;\n\n        // Handle radix specifier, if present\n        if (nm.startsWith(\"0x\", index) || nm.startsWith(\"0X\", index)) {\n            index +\u003d 2;\n            radix \u003d 16;\n        }\n        else if (nm.startsWith(\"#\", index)) {\n            index ++;\n            radix \u003d 16;\n        }\n        else if (nm.startsWith(\"0\", index) \u0026\u0026 nm.length() \u003e 1 + index) {\n            index ++;\n            radix \u003d 8;\n        }\n\n        if (nm.startsWith(\"-\", index) || nm.startsWith(\"+\", index))\n            throw new NumberFormatException(\"Sign character in wrong position\");\n\n        try {\n            result \u003d Integer.valueOf(nm.substring(index), radix);\n            result \u003d negative ? Integer.valueOf(-result.intValue()) : result;\n        } catch (NumberFormatException e) {\n            // If number is Integer.MIN_VALUE, we\u0027ll end up here. The next line\n            // handles this case, and causes any genuine format error to be\n            // rethrown.\n            String constant \u003d negative ? (\"-\" + nm.substring(index))\n                                       : nm.substring(index);\n            result \u003d Integer.valueOf(constant, radix);\n        }\n        return result;\n    }\n\n    /**\n     * Compares two {@code Integer} objects numerically.\n     *\n     * @param   anotherInteger   the {@code Integer} to be compared.\n     * @return  the value {@code 0} if this {@code Integer} is\n     *          equal to the argument {@code Integer}; a value less than\n     *          {@code 0} if this {@code Integer} is numerically less\n     *          than the argument {@code Integer}; and a value greater\n     *          than {@code 0} if this {@code Integer} is numerically\n     *           greater than the argument {@code Integer} (signed\n     *           comparison).\n     * @since   1.2\n     */\n    public int compareTo(Integer anotherInteger) {\n        return compare(this.value, anotherInteger.value);\n    }\n\n    /**\n     * Compares two {@code int} values numerically.\n     * The value returned is identical to what would be returned by:\n     * \u003cpre\u003e\n     *    Integer.valueOf(x).compareTo(Integer.valueOf(y))\n     * \u003c/pre\u003e\n     *\n     * @param  x the first {@code int} to compare\n     * @param  y the second {@code int} to compare\n     * @return the value {@code 0} if {@code x \u003d\u003d y};\n     *         a value less than {@code 0} if {@code x \u003c y}; and\n     *         a value greater than {@code 0} if {@code x \u003e y}\n     * @since 1.7\n     */\n    public static int compare(int x, int y) {\n        return (x \u003c y) ? -1 : ((x \u003d\u003d y) ? 0 : 1);\n    }\n\n    /**\n     * Compares two {@code int} values numerically treating the values\n     * as unsigned.\n     *\n     * @param  x the first {@code int} to compare\n     * @param  y the second {@code int} to compare\n     * @return the value {@code 0} if {@code x \u003d\u003d y}; a value less\n     *         than {@code 0} if {@code x \u003c y} as unsigned values; and\n     *         a value greater than {@code 0} if {@code x \u003e y} as\n     *         unsigned values\n     * @since 1.8\n     */\n    public static int compareUnsigned(int x, int y) {\n        return compare(x + MIN_VALUE, y + MIN_VALUE);\n    }\n\n    /**\n     * Converts the argument to a {@code long} by an unsigned\n     * conversion.  In an unsigned conversion to a {@code long}, the\n     * high-order 32 bits of the {@code long} are zero and the\n     * low-order 32 bits are equal to the bits of the integer\n     * argument.\n     *\n     * Consequently, zero and positive {@code int} values are mapped\n     * to a numerically equal {@code long} value and negative {@code\n     * int} values are mapped to a {@code long} value equal to the\n     * input plus 2\u003csup\u003e32\u003c/sup\u003e.\n     *\n     * @param  x the value to convert to an unsigned {@code long}\n     * @return the argument converted to {@code long} by an unsigned\n     *         conversion\n     * @since 1.8\n     */\n    public static long toUnsignedLong(int x) {\n        return ((long) x) \u0026 0xffffffffL;\n    }\n\n    /**\n     * Returns the unsigned quotient of dividing the first argument by\n     * the second where each argument and the result is interpreted as\n     * an unsigned value.\n     *\n     * \u003cp\u003eNote that in two\u0027s complement arithmetic, the three other\n     * basic arithmetic operations of add, subtract, and multiply are\n     * bit-wise identical if the two operands are regarded as both\n     * being signed or both being unsigned.  Therefore separate {@code\n     * addUnsigned}, etc. methods are not provided.\n     *\n     * @param dividend the value to be divided\n     * @param divisor the value doing the dividing\n     * @return the unsigned quotient of the first argument divided by\n     * the second argument\n     * @see #remainderUnsigned\n     * @since 1.8\n     */\n    public static int divideUnsigned(int dividend, int divisor) {\n        // In lieu of tricky code, for now just use long arithmetic.\n        return (int)(toUnsignedLong(dividend) / toUnsignedLong(divisor));\n    }\n\n    /**\n     * Returns the unsigned remainder from dividing the first argument\n     * by the second where each argument and the result is interpreted\n     * as an unsigned value.\n     *\n     * @param dividend the value to be divided\n     * @param divisor the value doing the dividing\n     * @return the unsigned remainder of the first argument divided by\n     * the second argument\n     * @see #divideUnsigned\n     * @since 1.8\n     */\n    public static int remainderUnsigned(int dividend, int divisor) {\n        // In lieu of tricky code, for now just use long arithmetic.\n        return (int)(toUnsignedLong(dividend) % toUnsignedLong(divisor));\n    }\n\n\n    // Bit twiddling\n\n    /**\n     * The number of bits used to represent an {@code int} value in two\u0027s\n     * complement binary form.\n     *\n     * @since 1.5\n     */\n    @Native public static final int SIZE \u003d 32;\n\n    /**\n     * The number of bytes used to represent an {@code int} value in two\u0027s\n     * complement binary form.\n     *\n     * @since 1.8\n     */\n    public static final int BYTES \u003d SIZE / Byte.SIZE;\n\n    /**\n     * Returns an {@code int} value with at most a single one-bit, in the\n     * position of the highest-order (\"leftmost\") one-bit in the specified\n     * {@code int} value.  Returns zero if the specified value has no\n     * one-bits in its two\u0027s complement binary representation, that is, if it\n     * is equal to zero.\n     *\n     * @param i the value whose highest one bit is to be computed\n     * @return an {@code int} value with a single one-bit, in the position\n     *     of the highest-order one-bit in the specified value, or zero if\n     *     the specified value is itself equal to zero.\n     * @since 1.5\n     */\n    public static int highestOneBit(int i) {\n        return i \u0026 (MIN_VALUE \u003e\u003e\u003e numberOfLeadingZeros(i));\n    }\n\n    /**\n     * Returns an {@code int} value with at most a single one-bit, in the\n     * position of the lowest-order (\"rightmost\") one-bit in the specified\n     * {@code int} value.  Returns zero if the specified value has no\n     * one-bits in its two\u0027s complement binary representation, that is, if it\n     * is equal to zero.\n     *\n     * @param i the value whose lowest one bit is to be computed\n     * @return an {@code int} value with a single one-bit, in the position\n     *     of the lowest-order one-bit in the specified value, or zero if\n     *     the specified value is itself equal to zero.\n     * @since 1.5\n     */\n    public static int lowestOneBit(int i) {\n        // HD, Section 2-1\n        return i \u0026 -i;\n    }\n\n    /**\n     * Returns the number of zero bits preceding the highest-order\n     * (\"leftmost\") one-bit in the two\u0027s complement binary representation\n     * of the specified {@code int} value.  Returns 32 if the\n     * specified value has no one-bits in its two\u0027s complement representation,\n     * in other words if it is equal to zero.\n     *\n     * \u003cp\u003eNote that this method is closely related to the logarithm base 2.\n     * For all positive {@code int} values x:\n     * \u003cul\u003e\n     * \u003cli\u003efloor(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d {@code 31 - numberOfLeadingZeros(x)}\n     * \u003cli\u003eceil(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d {@code 32 - numberOfLeadingZeros(x - 1)}\n     * \u003c/ul\u003e\n     *\n     * @param i the value whose number of leading zeros is to be computed\n     * @return the number of zero bits preceding the highest-order\n     *     (\"leftmost\") one-bit in the two\u0027s complement binary representation\n     *     of the specified {@code int} value, or 32 if the value\n     *     is equal to zero.\n     * @since 1.5\n     */\n    @HotSpotIntrinsicCandidate\n    public static int numberOfLeadingZeros(int i) {\n        // HD, Count leading 0\u0027s\n        if (i \u003c\u003d 0)\n            return i \u003d\u003d 0 ? 32 : 0;\n        int n \u003d 31;\n        if (i \u003e\u003d 1 \u003c\u003c 16) { n -\u003d 16; i \u003e\u003e\u003e\u003d 16; }\n        if (i \u003e\u003d 1 \u003c\u003c  8) { n -\u003d  8; i \u003e\u003e\u003e\u003d  8; }\n        if (i \u003e\u003d 1 \u003c\u003c  4) { n -\u003d  4; i \u003e\u003e\u003e\u003d  4; }\n        if (i \u003e\u003d 1 \u003c\u003c  2) { n -\u003d  2; i \u003e\u003e\u003e\u003d  2; }\n        return n - (i \u003e\u003e\u003e 1);\n    }\n\n    /**\n     * Returns the number of zero bits following the lowest-order (\"rightmost\")\n     * one-bit in the two\u0027s complement binary representation of the specified\n     * {@code int} value.  Returns 32 if the specified value has no\n     * one-bits in its two\u0027s complement representation, in other words if it is\n     * equal to zero.\n     *\n     * @param i the value whose number of trailing zeros is to be computed\n     * @return the number of zero bits following the lowest-order (\"rightmost\")\n     *     one-bit in the two\u0027s complement binary representation of the\n     *     specified {@code int} value, or 32 if the value is equal\n     *     to zero.\n     * @since 1.5\n     */\n    @HotSpotIntrinsicCandidate\n    public static int numberOfTrailingZeros(int i) {\n        // HD, Figure 5-14\n        int y;\n        if (i \u003d\u003d 0) return 32;\n        int n \u003d 31;\n        y \u003d i \u003c\u003c16; if (y !\u003d 0) { n \u003d n -16; i \u003d y; }\n        y \u003d i \u003c\u003c 8; if (y !\u003d 0) { n \u003d n - 8; i \u003d y; }\n        y \u003d i \u003c\u003c 4; if (y !\u003d 0) { n \u003d n - 4; i \u003d y; }\n        y \u003d i \u003c\u003c 2; if (y !\u003d 0) { n \u003d n - 2; i \u003d y; }\n        return n - ((i \u003c\u003c 1) \u003e\u003e\u003e 31);\n    }\n\n    /**\n     * Returns the number of one-bits in the two\u0027s complement binary\n     * representation of the specified {@code int} value.  This function is\n     * sometimes referred to as the \u003ci\u003epopulation count\u003c/i\u003e.\n     *\n     * @param i the value whose bits are to be counted\n     * @return the number of one-bits in the two\u0027s complement binary\n     *     representation of the specified {@code int} value.\n     * @since 1.5\n     */\n    @HotSpotIntrinsicCandidate\n    public static int bitCount(int i) {\n        // HD, Figure 5-2\n        i \u003d i - ((i \u003e\u003e\u003e 1) \u0026 0x55555555);\n        i \u003d (i \u0026 0x33333333) + ((i \u003e\u003e\u003e 2) \u0026 0x33333333);\n        i \u003d (i + (i \u003e\u003e\u003e 4)) \u0026 0x0f0f0f0f;\n        i \u003d i + (i \u003e\u003e\u003e 8);\n        i \u003d i + (i \u003e\u003e\u003e 16);\n        return i \u0026 0x3f;\n    }\n\n    /**\n     * Returns the value obtained by rotating the two\u0027s complement binary\n     * representation of the specified {@code int} value left by the\n     * specified number of bits.  (Bits shifted out of the left hand, or\n     * high-order, side reenter on the right, or low-order.)\n     *\n     * \u003cp\u003eNote that left rotation with a negative distance is equivalent to\n     * right rotation: {@code rotateLeft(val, -distance) \u003d\u003d rotateRight(val,\n     * distance)}.  Note also that rotation by any multiple of 32 is a\n     * no-op, so all but the last five bits of the rotation distance can be\n     * ignored, even if the distance is negative: {@code rotateLeft(val,\n     * distance) \u003d\u003d rotateLeft(val, distance \u0026 0x1F)}.\n     *\n     * @param i the value whose bits are to be rotated left\n     * @param distance the number of bit positions to rotate left\n     * @return the value obtained by rotating the two\u0027s complement binary\n     *     representation of the specified {@code int} value left by the\n     *     specified number of bits.\n     * @since 1.5\n     */\n    public static int rotateLeft(int i, int distance) {\n        return (i \u003c\u003c distance) | (i \u003e\u003e\u003e -distance);\n    }\n\n    /**\n     * Returns the value obtained by rotating the two\u0027s complement binary\n     * representation of the specified {@code int} value right by the\n     * specified number of bits.  (Bits shifted out of the right hand, or\n     * low-order, side reenter on the left, or high-order.)\n     *\n     * \u003cp\u003eNote that right rotation with a negative distance is equivalent to\n     * left rotation: {@code rotateRight(val, -distance) \u003d\u003d rotateLeft(val,\n     * distance)}.  Note also that rotation by any multiple of 32 is a\n     * no-op, so all but the last five bits of the rotation distance can be\n     * ignored, even if the distance is negative: {@code rotateRight(val,\n     * distance) \u003d\u003d rotateRight(val, distance \u0026 0x1F)}.\n     *\n     * @param i the value whose bits are to be rotated right\n     * @param distance the number of bit positions to rotate right\n     * @return the value obtained by rotating the two\u0027s complement binary\n     *     representation of the specified {@code int} value right by the\n     *     specified number of bits.\n     * @since 1.5\n     */\n    public static int rotateRight(int i, int distance) {\n        return (i \u003e\u003e\u003e distance) | (i \u003c\u003c -distance);\n    }\n\n    /**\n     * Returns the value obtained by reversing the order of the bits in the\n     * two\u0027s complement binary representation of the specified {@code int}\n     * value.\n     *\n     * @param i the value to be reversed\n     * @return the value obtained by reversing order of the bits in the\n     *     specified {@code int} value.\n     * @since 1.5\n     */\n    public static int reverse(int i) {\n        // HD, Figure 7-1\n        i \u003d (i \u0026 0x55555555) \u003c\u003c 1 | (i \u003e\u003e\u003e 1) \u0026 0x55555555;\n        i \u003d (i \u0026 0x33333333) \u003c\u003c 2 | (i \u003e\u003e\u003e 2) \u0026 0x33333333;\n        i \u003d (i \u0026 0x0f0f0f0f) \u003c\u003c 4 | (i \u003e\u003e\u003e 4) \u0026 0x0f0f0f0f;\n\n        return reverseBytes(i);\n    }\n\n    /**\n     * Returns the signum function of the specified {@code int} value.  (The\n     * return value is -1 if the specified value is negative; 0 if the\n     * specified value is zero; and 1 if the specified value is positive.)\n     *\n     * @param i the value whose signum is to be computed\n     * @return the signum function of the specified {@code int} value.\n     * @since 1.5\n     */\n    public static int signum(int i) {\n        // HD, Section 2-7\n        return (i \u003e\u003e 31) | (-i \u003e\u003e\u003e 31);\n    }\n\n    /**\n     * Returns the value obtained by reversing the order of the bytes in the\n     * two\u0027s complement representation of the specified {@code int} value.\n     *\n     * @param i the value whose bytes are to be reversed\n     * @return the value obtained by reversing the bytes in the specified\n     *     {@code int} value.\n     * @since 1.5\n     */\n    @HotSpotIntrinsicCandidate\n    public static int reverseBytes(int i) {\n        return (i \u003c\u003c 24)            |\n               ((i \u0026 0xff00) \u003c\u003c 8)  |\n               ((i \u003e\u003e\u003e 8) \u0026 0xff00) |\n               (i \u003e\u003e\u003e 24);\n    }\n\n    /**\n     * Adds two integers together as per the + operator.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the sum of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     */\n    public static int sum(int a, int b) {\n        return a + b;\n    }\n\n    /**\n     * Returns the greater of two {@code int} values\n     * as if by calling {@link Math#max(int, int) Math.max}.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the greater of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     */\n    public static int max(int a, int b) {\n        return Math.max(a, b);\n    }\n\n    /**\n     * Returns the smaller of two {@code int} values\n     * as if by calling {@link Math#min(int, int) Math.min}.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the smaller of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     */\n    public static int min(int a, int b) {\n        return Math.min(a, b);\n    }\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    @Native private static final long serialVersionUID \u003d 1360826667806852920L;\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:320)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Dec 01, 2023 1:22:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/Integer.java"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor15.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:608)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2023.12.01 13:22:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/Integer.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.semanticTokensFull(WorkspaceLspService.scala:462)
	scala.meta.metals.lsp.DelegatingScalaService.semanticTokensFull(DelegatingScalaService.scala:208)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:22:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2094)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.Compilers.semanticTokens(Compilers.scala:424)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$semanticTokensFull$2(MetalsLspService.scala:1556)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 12 more

2023.12.01 13:22:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/Integer.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:452)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:22:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1634)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1633)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:452)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 26 more

2023.12.01 13:22:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java

Uri: jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/Integer.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:248)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:447)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:829)
```

Dec 01, 2023 1:22:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2094)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$3(MetalsLspService.scala:1624)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1623)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 13 more

Dec 01, 2023 1:22:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%25252B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21%2B9/lib/src.zip%21/java.base/java/lang/Integer.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:645)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:642)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 200: jar:file:///C:/Users/rogier/AppData/Local/Coursier/cache/arc/https/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip/jdk-11.0.21 9/lib/src.zip!/java.base/java/lang/Integer.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2023.12.01 13:22:53 ERROR Build server error: Exception in thread "main" java.lang.NumberFormatException: For input string: "
2023.12.01 13:22:53 ERROR "
2023.12.01 13:22:53 ERROR 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
2023.12.01 13:22:53 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:638)
2023.12.01 13:22:53 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:770)
2023.12.01 13:22:53 ERROR Build server error: 	at scala.collection.StringOps$.toInt$extension(StringOps.scala:908)
2023.12.01 13:22:53 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1$$anonfun$1(Day01.scala:8)
2023.12.01 13:22:53 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:22:53 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1(Day01.scala:8)
2023.12.01 13:22:53 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:22:53 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse(Day01.scala:8)
2023.12.01 13:22:53 ERROR Build server error: 	at AdventOfCode2022.Day01$.part1(Day01.scala:11)
2023.12.01 13:22:53 ERROR Build server error: 	at AdventOfCode2022.Day01$.main(Day01.scala:17)
2023.12.01 13:22:53 ERROR Build server error: 	at AdventOfCode2022.Day01.main(Day01.scala)
2023.12.01 13:22:53 INFO  Closing debug server tcp://0.0.0.0:50937
2023.12.01 13:22:53 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:25:06 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:25:06 INFO  time: compiled advent_of_code in 0.23s
2023.12.01 13:25:08 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:25:08 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:25:09 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:25:09 INFO  Loaded expression compiler in 0 milliseconds
2023.12.01 13:25:09 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:25:10 INFO  Loaded all sources and classes in 1 second
2023.12.01 13:25:10 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50952 .
2023.12.01 13:25:10 INFO  Attaching to debuggee VM succeeded.
2023.12.01 13:25:13 ERROR Exception in thread "main" java.lang.NumberFormatException: For input string: "5800
2023.12.01 13:25:13 ERROR "
2023.12.01 13:25:13 ERROR 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
2023.12.01 13:25:13 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:652)
2023.12.01 13:25:13 ERROR Build server error: 	at java.base/java.lang.Integer.parseInt(Integer.java:770)
2023.12.01 13:25:13 ERROR Build server error: 	at scala.collection.StringOps$.toInt$extension(StringOps.scala:908)
2023.12.01 13:25:13 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1$$anonfun$1(Day01.scala:8)
2023.12.01 13:25:13 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:25:13 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse$$anonfun$1(Day01.scala:8)
2023.12.01 13:25:13 ERROR Build server error: 	at scala.collection.ArrayOps$.map$extension(ArrayOps.scala:932)
2023.12.01 13:25:13 ERROR Build server error: 	at AdventOfCode2022.Day01$.parse(Day01.scala:8)
2023.12.01 13:25:13 ERROR Build server error: 	at AdventOfCode2022.Day01$.part1(Day01.scala:11)
2023.12.01 13:25:13 ERROR Build server error: 	at AdventOfCode2022.Day01$.main(Day01.scala:17)
2023.12.01 13:25:13 ERROR Build server error: 	at AdventOfCode2022.Day01.main(Day01.scala)
2023.12.01 13:25:13 INFO  Closing debug server tcp://0.0.0.0:50950
2023.12.01 13:25:13 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:25:20 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:25:20 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:25:20 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:25:20 INFO  Loaded expression compiler in 1 millisecond
2023.12.01 13:25:20 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:25:20 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-server.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.12.01 13:25:20 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\dap-client.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.12.01 13:25:21 INFO  Starting debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:25:20 INFO  Loaded expression compiler in 0 milliseconds
2023.12.01 13:25:20 INFO  Loaded step filter in 0 milliseconds
2023.12.01 13:25:20 WARN  Cannot list the source files in C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9\lib\src.zip: FileSystemAlreadyExistsException null
2023.12.01 13:25:20 WARN  Cannot list the source files in C:\Users\rogier\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.10\scala-library-2.13.10-sources.jar: FileSystemAlreadyExistsException null
2023.12.01 13:25:20 WARN  Cannot list the source files in C:\Users\rogier\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-library_3\3.3.1\scala3-library_3-3.3.1-sources.jar: FileSystemAlreadyExistsException null
2023.12.01 13:25:21 INFO  Loaded all sources and classes in 342 milliseconds
2023.12.01 13:25:21 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50972 .
2023.12.01 13:25:21 INFO  Attaching to debuggee VM succeeded.
2023.12.01 13:25:21 INFO  Loaded all sources and classes in 1 second
2023.12.01 13:25:21 INFO  Trying to attach to remote debuggee VM kubernetes.docker.internal:50963 .
2023.12.01 13:25:21 INFO  Attaching to debuggee VM succeeded.
2023.12.01 13:27:19 INFO  compiling advent_of_code (1 scala source)
2023.12.01 13:27:19 INFO  time: compiled advent_of_code in 0.22s
2023.12.01 13:28:40 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
2023.12.01 13:28:40 INFO  Closing debug server tcp://0.0.0.0:50969
2023.12.01 14:14:03 INFO  Canceling debug proxy for [AdventOfCode2022.Day01]
Dec 01, 2023 2:15:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2802
Dec 01, 2023 2:15:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2803
2023.12.01 14:15:06 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 14:15:06 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 14:15:06 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 14:15:06 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 14:15:06 INFO  Connected to Build server: Bloop v1.5.11
2023.12.01 14:15:06 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 14:15:06 INFO  Connected to Build server: Bloop v1.5.11
2023.12.01 14:15:06 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 14:15:06 INFO  compiling advent_of_code (1 scala source)
2023.12.01 14:15:06 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 14:15:06 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 14:15:06 INFO  time: compiled advent_of_code in 0.18s
2023.12.01 14:15:06 INFO  time: Imported build in 0.24s
2023.12.01 14:15:08 INFO  time: indexed workspace in 1.88s
2023.12.01 14:15:08 WARN  no build target for: C:\dev\scala\Advent_of_code\build.sbt
2023.12.01 14:15:08 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:15:10 INFO  no build target found for C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala. Using presentation compiler with project's scala-library version: 3.3.1
Dec 01, 2023 2:15:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2831
2023.12.01 14:15:10 INFO  time: code lens generation in 2.9s
2023.12.01 14:15:10 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:15:26 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:15:34 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:15:38 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:15:45 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:15:56 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:17:07 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:17:26 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:17:28 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:17:48 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:17:50 ERROR Empty build targets. Expected at least one build target identifier.
Dec 01, 2023 2:17:54 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3065
2023.12.01 14:18:14 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:18:32 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:18:44 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:18:55 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 14:18:58 ERROR Empty build targets. Expected at least one build target identifier.
Dec 01, 2023 2:18:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: scala.meta.internal.metals.debug.BuildTargetNotFoundForPathException: No build target could be found for the path: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
java.util.concurrent.CompletionException: scala.meta.internal.metals.debug.BuildTargetNotFoundForPathException: No build target could be found for the path: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.uniAcceptNow(CompletableFuture.java:743)
	at java.base/java.util.concurrent.CompletableFuture.uniAcceptStage(CompletableFuture.java:731)
	at java.base/java.util.concurrent.CompletableFuture.thenAcceptAsync(CompletableFuture.java:2118)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.thenAccept(FutureConvertersImpl.scala:37)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:279)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: scala.meta.internal.metals.debug.BuildTargetNotFoundForPathException: No build target could be found for the path: C:\dev\scala\Advent_of_code\src\main\scala\AdventOfCode2022\Day01.scala
	at scala.meta.internal.metals.debug.DebugProvider.debugDiscovery(DebugProvider.scala:469)
	at scala.meta.internal.metals.MetalsLspService.debugDiscovery(MetalsLspService.scala:1857)
	at scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:880)
	at scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	at jdk.internal.reflect.GeneratedMethodAccessor26.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	... 9 more

2023.12.01 15:15:44 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 15:15:55 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 15:16:59 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 15:17:01 ERROR Empty build targets. Expected at least one build target identifier.
2023.12.01 15:17:14 ERROR Empty build targets. Expected at least one build target identifier.
Dec 01, 2023 3:17:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3430
2023.12.01 15:17:40 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 15:17:42 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 15:17:42 WARN  no build target for: C:\dev\scala\Advent_of_code\build.sbt
2023.12.01 15:17:42 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 15:17:44 INFO  running 'C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\rogier\AppData\Local\Temp\metals3351611803633449393\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2023.12.01 15:17:48 INFO  [info] welcome to sbt 1.9.7 (Eclipse Adoptium Java 11.0.21)
2023.12.01 15:17:48 INFO  [info] loading settings for project advent_of_code-build-build from metals.sbt ...
2023.12.01 15:17:49 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project\project
2023.12.01 15:17:51 INFO  [info] loading settings for project advent_of_code-build from metals.sbt ...
2023.12.01 15:17:51 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project
2023.12.01 15:17:53 INFO  [success] Generated .bloop\advent_of_code-build.json
2023.12.01 15:17:53 INFO  [success] Total time: 2 s, completed 1 Dec 2023, 15:17:53
2023.12.01 15:17:55 INFO  [info] loading settings for project advent_of_code from build.sbt ...
2023.12.01 15:17:55 INFO  [info] set current project to Advent of Code (in build file:/C:/dev/scala/Advent_of_code/)
2023.12.01 15:17:57 INFO  [success] Generated .bloop\advent_of_code.json
2023.12.01 15:17:57 INFO  [success] Generated .bloop\advent_of_code-test.json
2023.12.01 15:17:57 INFO  [success] Total time: 1 s, completed 1 Dec 2023, 15:17:57
2023.12.01 15:17:57 INFO  time: ran 'sbt bloopInstall' in 12s
2023.12.01 15:17:57 INFO  Disconnecting from Bloop session...
2023.12.01 15:17:57 INFO  Shut down connection with build server.
2023.12.01 15:17:57 INFO  Shut down connection with build server.
2023.12.01 15:17:57 INFO  Failed to run request with params WorkspaceBuildTargetsResult
2023.12.01 15:17:57 INFO  Attempting to connect to the build server...
2023.12.01 15:17:57 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 15:17:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 15:17:58 INFO  Attempting to connect to the build server...
2023.12.01 15:17:58 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 15:17:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 15:17:58 INFO  time: Connected to build server in 1.36s
2023.12.01 15:17:58 INFO  Connected to Build server: Bloop v1.5.11
2023.12.01 15:18:03 INFO  time: indexed workspace in 5.09s
2023.12.01 15:18:03 INFO  compiling advent_of_code (1 scala source)
2023.12.01 15:18:05 INFO  time: compiled advent_of_code in 1.98s
2023.12.01 15:18:05 INFO  compiling advent_of_code-test (1 scala source)
2023.12.01 15:18:05 INFO  time: compiled advent_of_code-test in 7ms
Dec 01, 2023 3:18:56 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\dev\scala\Advent_of_code\.metals\.reports\metals-full\2023-12-01\r_compiler-error_(advent_of_code-build)_15-18-56-586.md
2023.12.01 15:18:56 WARN  Could not find semantic tokens for: file:///C:/dev/scala/Advent_of_code/build.sbt
2023.12.01 15:19:03 INFO  running 'C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\rogier\AppData\Local\Temp\metals18342533755740341480\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2023.12.01 15:19:06 INFO  [info] welcome to sbt 1.9.7 (Eclipse Adoptium Java 11.0.21)
2023.12.01 15:19:06 INFO  [info] loading settings for project advent_of_code-build-build from metals.sbt ...
2023.12.01 15:19:08 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project\project
2023.12.01 15:19:09 INFO  [info] loading settings for project advent_of_code-build from metals.sbt ...
2023.12.01 15:19:09 INFO  [info] loading project definition from C:\dev\scala\Advent_of_code\project
2023.12.01 15:19:11 INFO  [success] Generated .bloop\advent_of_code-build.json
2023.12.01 15:19:11 INFO  [success] Total time: 3 s, completed 1 Dec 2023, 15:19:12
2023.12.01 15:19:14 INFO  [info] loading settings for project advent_of_code from build.sbt ...
2023.12.01 15:19:14 INFO  [info] set current project to Advent of Code (in build file:/C:/dev/scala/Advent_of_code/)
2023.12.01 15:19:14 INFO  [success] Generated .bloop\advent_of_code.json
2023.12.01 15:19:14 INFO  [success] Generated .bloop\advent_of_code-test.json
2023.12.01 15:19:14 INFO  [success] Total time: 0 s, completed 1 Dec 2023, 15:19:14
2023.12.01 15:19:15 INFO  time: ran 'sbt bloopInstall' in 11s
2023.12.01 15:19:15 INFO  Disconnecting from Bloop session...
2023.12.01 15:19:15 INFO  Shut down connection with build server.
2023.12.01 15:19:15 INFO  Shut down connection with build server.
2023.12.01 15:19:15 INFO  Attempting to connect to the build server...
2023.12.01 15:19:15 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 15:19:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 15:19:15 INFO  Attempting to connect to the build server...
2023.12.01 15:19:15 INFO  Bloop uses C:\Users\rogier\AppData\Local\Coursier\cache\arc\https\github.com\adoptium\temurin11-binaries\releases\download\jdk-11.0.21%252B9\OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.zip\jdk-11.0.21+9 defined at C:\Users\rogier\.bloop\bloop.json
2023.12.01 15:19:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\dev\scala\Advent_of_code\project\.metals\bsp.trace.json or C:\Users\rogier\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.12.01 15:19:15 INFO  time: Connected to build server in 0.11s
2023.12.01 15:19:15 INFO  Connected to Build server: Bloop v1.5.11
2023.12.01 15:19:17 INFO  time: indexed workspace in 1.86s
2023.12.01 15:19:17 INFO  compiling advent_of_code (1 scala source)
2023.12.01 15:19:18 INFO  time: compiled advent_of_code in 1.74s
2023.12.01 15:19:18 INFO  compiling advent_of_code-test (1 scala source)
2023.12.01 15:19:18 INFO  time: compiled advent_of_code-test in 23ms
2023.12.01 15:19:19 INFO  time: code lens generation in 1.66s
2023.12.01 15:23:01 INFO  compiling advent_of_code (1 scala source)
2023.12.01 15:23:01 INFO  time: compiled advent_of_code in 52ms
2023.12.01 15:23:08 INFO  compiling advent_of_code (1 scala source)
2023.12.01 15:23:08 INFO  time: compiled advent_of_code in 53ms
2023.12.01 15:23:11 INFO  compiling advent_of_code (1 scala source)
2023.12.01 15:23:11 INFO  time: compiled advent_of_code in 36ms
2023.12.01 15:23:23 INFO  compiling advent_of_code (1 scala source)
2023.12.01 15:23:23 INFO  time: compiled advent_of_code in 98ms
2023.12.01 15:23:42 INFO  time: evaluated worksheet 'Worksheet.worksheet.sc' in 5.11s
[31merror[39m: 
Worksheet.worksheet.sc:8 (mdoc generated code) 
 Found:    Unit
Required: Int
    $doc.endStatement();


2023.12.01 15:25:07 INFO  time: evaluated worksheet 'Worksheet.worksheet.sc' in 0.52s
[31merror[39m: src\main\scala\AdventOfCode2023\Worksheet.worksheet.sc:2:5: 
Found:    java.util.stream.IntStream
Required: Int
    value.chars()
    ^^^^^^^^^^^^^
2023.12.01 15:26:17 INFO  time: evaluated worksheet 'Worksheet.worksheet.sc' in 0.26s
[31merror[39m: src\main\scala\AdventOfCode2023\Worksheet.worksheet.sc:2:5: 
Found:    java.util.PrimitiveIterator#OfInt
Required: Int
    value.chars().iterator()
    ^^^^^^^^^^^^^^^^^^^^^^^^
2023.12.01 15:26:33 INFO  time: evaluated worksheet 'Worksheet.worksheet.sc' in 0.27s
[31merror[39m: src\main\scala\AdventOfCode2023\Worksheet.worksheet.sc:2:5: 
value toSeq is not a member of java.util.stream.IntStream - did you mean IntStream.boxed?
    value.chars().toSeq
    ^^^^^^^^^^^^^^^^^^^
2023.12.01 15:26:41 INFO  time: evaluated worksheet 'Worksheet.worksheet.sc' in 0.21s
[31merror[39m: src\main\scala\AdventOfCode2023\Worksheet.worksheet.sc:2:22: illegal start of simple expression
    for x <- value = 
                     ^
2023.12.01 15:27:02 INFO  time: evaluated worksheet 'Worksheet.worksheet.sc' in 0.56s
[31merror[39m: src\main\scala\AdventOfCode2023\Worksheet.worksheet.sc:2:20: identifier expected but outdent found
    for x <- value:
                   ^
2023.12.01 15:27:08 INFO  time: evaluated worksheet 'Worksheet.worksheet.sc' in 0.37s
2023.12.01 19:11:57 INFO  Shutting down server
2023.12.01 19:11:57 INFO  shutting down Metals
2023.12.01 19:11:57 ERROR build shutdown: bloop
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: An existing connection was forcibly closed by the remote host
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:395)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2028)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:134)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:131)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)
Caused by: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: An existing connection was forcibly closed by the remote host
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at com.sun.proxy.$Proxy11.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:134)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:131)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)
Caused by: java.io.IOException: An existing connection was forcibly closed by the remote host
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:113)
	at sun.nio.ch.IOUtil.write(IOUtil.java:79)
	at sun.nio.ch.IOUtil.write(IOUtil.java:50)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:459)
	at sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.nio.channels.Channels$1.write(Channels.java:172)
	at java.io.OutputStream.write(OutputStream.java:122)
	at java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:68)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at com.sun.proxy.$Proxy11.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:134)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:131)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)

2023.12.01 19:11:57 ERROR build shutdown: bloop
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: An established connection was aborted by the software in your host machine
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:395)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2028)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:134)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:131)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)
Caused by: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: An established connection was aborted by the software in your host machine
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at com.sun.proxy.$Proxy11.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:134)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:131)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)
Caused by: java.io.IOException: An established connection was aborted by the software in your host machine
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:113)
	at sun.nio.ch.IOUtil.write(IOUtil.java:79)
	at sun.nio.ch.IOUtil.write(IOUtil.java:50)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:459)
	at sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.nio.channels.Channels$1.write(Channels.java:172)
	at java.io.OutputStream.write(OutputStream.java:122)
	at java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at com.sun.proxy.$Proxy11.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:134)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:131)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:829)

2023.12.01 19:11:57 INFO  Exiting server
